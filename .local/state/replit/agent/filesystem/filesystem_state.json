{"file_contents":{"backend/JWT_AUTH_MIGRATION.md":{"content":"# JWT Authentication Migration Guide\n\nThis document describes the changes made to migrate from cookie-based authentication to JWT-based authentication.\n\n## Changes Made\n\n### 1. New Dependencies\n- Added `jsonwebtoken` package for JWT token generation and verification\n\n### 2. New Files Created\n- **`utlis/jwtHelpers.js`**: JWT utility functions for token generation and verification\n- **`test-jwt-auth.js`**: Test script to verify JWT authentication\n\n### 3. Modified Files\n\n#### `Middleware/auth.js`\n- Changed from reading cookies to reading Authorization header\n- Now expects tokens in format: `Authorization: Bearer <token>`\n- Updated error messages for JWT-specific errors (expired, invalid tokens)\n\n#### `Controller/StudentAuthController.js`\n- Login now returns a JWT token instead of setting a cookie\n- Response includes:\n  - `token`: The JWT token\n  - `expiresIn`: Token expiration time (24h)\n- Logout is now handled client-side (remove token from storage)\n\n#### `app.js`\n- Removed `cookie-parser` dependency\n- Updated CORS configuration to allow Authorization header\n\n## API Changes\n\n### Login Endpoint\n**POST** `/api/students/login`\n\nRequest:\n```json\n{\n  \"studentID\": \"your-student-id\",\n  \"password\": \"your-password\"\n}\n```\n\nResponse:\n```json\n{\n  \"message\": \"Welcome John Doe\",\n  \"studentID\": \"your-student-id\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expiresIn\": \"24h\"\n}\n```\n\n### Protected Routes\nAll protected routes now require the JWT token in the Authorization header:\n\n```\nAuthorization: Bearer <your-jwt-token>\n```\n\nExample:\n```javascript\nfetch('http://localhost:1000/api/students/profile', {\n  headers: {\n    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n  }\n})\n```\n\n## Client-Side Implementation\n\n### Storing the Token\nAfter successful login, store the token securely:\n```javascript\n// Example using localStorage (consider security implications)\nlocalStorage.setItem('authToken', response.data.token);\n```\n\n### Using the Token\nInclude the token in all requests to protected endpoints:\n```javascript\nconst token = localStorage.getItem('authToken');\n\nfetch('/api/students/profile', {\n  headers: {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }\n});\n```\n\n### Logout\nSimply remove the token from client storage:\n```javascript\nlocalStorage.removeItem('authToken');\n```\n\n## Environment Variables\n\nAdd to your `.env` file:\n```\nJWT_SECRET=your-super-secret-jwt-key-change-this-in-production\nJWT_EXPIRES_IN=24h\n```\n\n## Security Considerations\n\n1. **Token Storage**: \n   - Consider using httpOnly cookies for token storage if XSS is a concern\n   - Or use sessionStorage instead of localStorage for better security\n\n2. **Token Expiration**: \n   - Tokens expire after 24 hours by default\n   - Implement token refresh mechanism for better UX\n\n3. **Secret Key**: \n   - Always use a strong, random JWT secret in production\n   - Never commit the secret to version control\n\n## Testing\n\nRun the test script to verify JWT authentication:\n```bash\n# Install test dependency\nbun add axios\n\n# Run tests\nnode test-jwt-auth.js\n```\n\n## Migration Checklist\n\n- [x] Install jsonwebtoken package\n- [x] Create JWT helper functions\n- [x] Update auth middleware\n- [x] Update login controller\n- [x] Remove cookie-parser\n- [x] Update CORS settings\n- [ ] Update frontend to use JWT tokens\n- [ ] Test all protected endpoints\n- [ ] Update API documentation","size_bytes":3405},"backend/app.js":{"content":"require('dotenv').config();//this loads up the environment variables\nconst PORT = process.env.BACKEND_PORT || 3001;\n\n//CORE MODULES\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst path = require('path');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\n\n// Request logging middleware - MUST BE FIRST\napp.use((req, res, next) => {\n  console.log(`🌐 Incoming request: ${req.method} ${req.url}`);\n  \n  // Only log detailed headers in development\n  if (process.env.NODE_ENV !== 'production') {\n    const safeHeaders = { ...req.headers };\n    // Redact sensitive headers\n    if (safeHeaders.authorization) safeHeaders.authorization = '[REDACTED]';\n    if (safeHeaders.cookie) safeHeaders.cookie = '[REDACTED]';\n    console.log('📦 Headers:', safeHeaders);\n  }\n  \n  if (req.body && Object.keys(req.body).length > 0) {\n    const safeBody = { ...req.body };\n    // Redact all password fields\n    Object.keys(safeBody).forEach(key => {\n      if (key.toLowerCase().includes('password') || key.toLowerCase().includes('token')) {\n        safeBody[key] = '[REDACTED]';\n      }\n    });\n    console.log('📝 Body:', safeBody);\n  }\n  next();\n});\n\n//MIDDLEWARE\napp.use(express.json());\napp.use(express.urlencoded({ extended: true })); // Added to handle URL-encoded data\napp.use(cookieParser()); // Parse cookies\n// CORS configuration - secure by default\nconst corsOrigin = (origin, callback) => {\n  const allowedOrigins = process.env.ALLOWED_ORIGINS ? \n    process.env.ALLOWED_ORIGINS.split(',') : \n    ['http://localhost:5000', 'http://localhost:3000', 'http://localhost:3001'];\n  \n  // Allow requests with no origin (e.g., mobile apps, Postman)\n  if (!origin) return callback(null, true);\n  \n  if (allowedOrigins.indexOf(origin) !== -1 || process.env.NODE_ENV === 'development') {\n    callback(null, true);\n  } else {\n    callback(new Error('Not allowed by CORS'));\n  }\n};\n\napp.use(cors({\n    origin: corsOrigin,\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\n// Serve static files from public directory\napp.use(express.static(path.join(__dirname, 'public')));\nconsole.log('✅ Static files serving enabled from /public');\n\n//CONNECTION TO MONGODB\nconsole.log('🔄 Attempting MongoDB connection...');\nconst connectDB = require('./config/database');\nconnectDB().then(connected => {\n  if (connected) {\n    console.log('✅ MongoDB connection initiated successfully');\n  } else {\n    console.log('⚠️  Server starting without database connection');\n  }\n}).catch(err => {\n  console.error('❌ Database connection error:', err.message);\n  console.log('⚠️  Server starting without database connection');\n});\n\n// Monitor MongoDB connection\nmongoose.connection.on('connected', () => {\n  console.log('✅ MongoDB connected successfully');\n});\n\nmongoose.connection.on('error', (err) => {\n  console.log('❌ MongoDB connection error:', err.message);\n});\n\n// STUDENT ROUTES\nconsole.log('🔄 Loading API routes...');\nconst StudentAuth = require('./Routes/StudentAuth');\nconst Attendance = require('./Routes/Attendance');\nconst Calendar = require('./Routes/Calendar');\nconst Homework = require('./Routes/Homework');\nconst Marks = require('./Routes/Marks');\nconst Notice = require('./Routes/Notice');\nconst Timetable = require('./Routes/Timetable');\n\napp.use('/api/students', StudentAuth);\napp.use('/api/students/Attendance',Attendance);\napp.use('/api/students/Calendar',Calendar);\napp.use('/api/students/Homework',Homework);\napp.use('/api/students/Marks',Marks);\napp.use('/api/students/Notice',Notice);\napp.use('/api/students/Timetable',Timetable);\nconsole.log('✅ All API routes loaded');\n\n//ADMIN ROUTES\nconst AdminAuth = require('./Routes/Admin/AdminAuth');\nconst AdminStudents = require('./Routes/Admin/Student');\nconst AdminTeachers = require('./Routes/Admin/Teacher');\nconst AdminCalendar = require('./Routes/Admin/Calendar');\n\napp.use('/api/admin', AdminAuth);\napp.use('/api/admin/students', AdminStudents);\napp.use('/api/admin/teachers', AdminTeachers);\napp.use('/api/admin/calendar', AdminCalendar);\n\nconsole.log('✅ Admin routes loaded');\n\n//TEACHER ROUTES\nconst TeacherAuth = require('./Routes/Teacher/TeacherAuth');\nconst TeacherAttendance = require('./Routes/Teacher/Attendance');\nconst TeacherCalendar = require('./Routes/Teacher/Calendar');\nconst TeacherHomework = require('./Routes/Teacher/Homework');\nconst TeacherMarks = require('./Routes/Teacher/Marks');\nconst TeacherTimetable = require('./Routes/Teacher/Timetable');\nconst TeacherNotice = require('./Routes/Teacher/Notice');\n\napp.use('/api/teachers', TeacherAuth);\napp.use('/api/teachers/Attendance', TeacherAttendance);\napp.use('/api/teachers/Calendar', TeacherCalendar);\napp.use('/api/teachers/Homework', TeacherHomework);\napp.use('/api/teachers/Marks', TeacherMarks);\napp.use('/api/teachers/Timetable', TeacherTimetable);\napp.use('/api/teachers/Notice', TeacherNotice);\n\nconsole.log('✅ Teacher routes loaded');\n\n\n// Health check endpoint\napp.get('/healthz', (req, res) => {\n  const health = {\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    database: 'disconnected'\n  };\n  \n  // Check MongoDB connection status\n  if (mongoose.connection.readyState === 1) {\n    health.database = 'connected';\n  } else if (mongoose.connection.readyState === 2) {\n    health.database = 'connecting';\n  }\n  \n  const statusCode = health.database === 'connected' ? 200 : 503;\n  res.status(statusCode).json(health);\n});\n\n// Default Route - Serve HTML file with logging\napp.get('/', (req, res) => {\n  console.log('📄 Serving landing page request');\n  res.sendFile(path.join(__dirname, 'public', 'index.html'), (err) => {\n    if (err) {\n      console.log('❌ HTML file not found, sending fallback message');\n      res.send('Student Portal API is running!');\n    } else {\n      console.log('✅ HTML file served successfully');\n    }\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Unhandled error:', err);\n  res.status(500).json({ message: 'Internal server error' });\n});\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({ message: 'Route not found' });\n});\n\n// Start Server\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`🚀 Server running on port ${PORT}`);\n  console.log(`📍 Local: http://localhost:${PORT}`);\n  console.log(`🌐 Public: http://0.0.0.0:${PORT}`);\n  console.log('📊 Ready to accept requests...');\n});\n","size_bytes":6552},"backend/pnpm-lock.yaml":{"content":"lockfileVersion: '9.0'\n\nsettings:\n  autoInstallPeers: true\n  excludeLinksFromLockfile: false\n\nimporters:\n\n  .:\n    dependencies:\n      bcrypt:\n        specifier: ^6.0.0\n        version: 6.0.0\n      cookie-parser:\n        specifier: ^1.4.7\n        version: 1.4.7\n      cors:\n        specifier: ^2.8.5\n        version: 2.8.5\n      express:\n        specifier: ^5.1.0\n        version: 5.1.0\n      jsonwebtoken:\n        specifier: ^9.0.2\n        version: 9.0.2\n      mongoose:\n        specifier: ^8.18.0\n        version: 8.18.0(socks@2.8.7)\n      pm2:\n        specifier: ^6.0.8\n        version: 6.0.8\n    devDependencies:\n      dotenv:\n        specifier: ^17.2.1\n        version: 17.2.1\n      eslint:\n        specifier: ^9.34.0\n        version: 9.34.0\n      nodemon:\n        specifier: ^3.1.10\n        version: 3.1.10\n\npackages:\n\n  '@eslint-community/eslint-utils@4.8.0':\n    resolution: {integrity: sha512-MJQFqrZgcW0UNYLGOuQpey/oTN59vyWwplvCGZztn1cKz9agZPPYpJB7h2OMmuu7VLqkvEjN8feFZJmxNF9D+Q==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n    peerDependencies:\n      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0\n\n  '@eslint-community/regexpp@4.12.1':\n    resolution: {integrity: sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==}\n    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}\n\n  '@eslint/config-array@0.21.0':\n    resolution: {integrity: sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  '@eslint/config-helpers@0.3.1':\n    resolution: {integrity: sha512-xR93k9WhrDYpXHORXpxVL5oHj3Era7wo6k/Wd8/IsQNnZUTzkGS29lyn3nAT05v6ltUuTFVCCYDEGfy2Or/sPA==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  '@eslint/core@0.15.2':\n    resolution: {integrity: sha512-78Md3/Rrxh83gCxoUc0EiciuOHsIITzLy53m3d9UyiW8y9Dj2D29FeETqyKA+BRK76tnTp6RXWb3pCay8Oyomg==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  '@eslint/eslintrc@3.3.1':\n    resolution: {integrity: sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  '@eslint/js@9.34.0':\n    resolution: {integrity: sha512-EoyvqQnBNsV1CWaEJ559rxXL4c8V92gxirbawSmVUOWXlsRxxQXl6LmCpdUblgxgSkDIqKnhzba2SjRTI/A5Rw==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  '@eslint/object-schema@2.1.6':\n    resolution: {integrity: sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  '@eslint/plugin-kit@0.3.5':\n    resolution: {integrity: sha512-Z5kJ+wU3oA7MMIqVR9tyZRtjYPr4OC004Q4Rw7pgOKUOKkJfZ3O24nz3WYfGRpMDNmcOi3TwQOmgm7B7Tpii0w==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  '@humanfs/core@0.19.1':\n    resolution: {integrity: sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==}\n    engines: {node: '>=18.18.0'}\n\n  '@humanfs/node@0.16.7':\n    resolution: {integrity: sha512-/zUx+yOsIrG4Y43Eh2peDeKCxlRt/gET6aHfaKpuq267qXdYDFViVHfMaLyygZOnl0kGWxFIgsBy8QFuTLUXEQ==}\n    engines: {node: '>=18.18.0'}\n\n  '@humanwhocodes/module-importer@1.0.1':\n    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}\n    engines: {node: '>=12.22'}\n\n  '@humanwhocodes/retry@0.4.3':\n    resolution: {integrity: sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==}\n    engines: {node: '>=18.18'}\n\n  '@mongodb-js/saslprep@1.3.0':\n    resolution: {integrity: sha512-zlayKCsIjYb7/IdfqxorK5+xUMyi4vOKcFy10wKJYc63NSdKI8mNME+uJqfatkPmOSMMUiojrL58IePKBm3gvQ==}\n\n  '@pm2/agent@2.1.1':\n    resolution: {integrity: sha512-0V9ckHWd/HSC8BgAbZSoq8KXUG81X97nSkAxmhKDhmF8vanyaoc1YXwc2KVkbWz82Rg4gjd2n9qiT3i7bdvGrQ==}\n\n  '@pm2/io@6.1.0':\n    resolution: {integrity: sha512-IxHuYURa3+FQ6BKePlgChZkqABUKFYH6Bwbw7V/pWU1pP6iR1sCI26l7P9ThUEB385ruZn/tZS3CXDUF5IA1NQ==}\n    engines: {node: '>=6.0'}\n\n  '@pm2/js-api@0.8.0':\n    resolution: {integrity: sha512-nmWzrA/BQZik3VBz+npRcNIu01kdBhWL0mxKmP1ciF/gTcujPTQqt027N9fc1pK9ERM8RipFhymw7RcmCyOEYA==}\n    engines: {node: '>=4.0'}\n\n  '@pm2/pm2-version-check@1.0.4':\n    resolution: {integrity: sha512-SXsM27SGH3yTWKc2fKR4SYNxsmnvuBQ9dd6QHtEWmiZ/VqaOYPAIlS8+vMcn27YLtAEBGvNRSh3TPNvtjZgfqA==}\n\n  '@tootallnate/quickjs-emscripten@0.23.0':\n    resolution: {integrity: sha512-C5Mc6rdnsaJDjO3UpGW/CQTHtCKaYlScZTly4JIu97Jxo/odCiH0ITnDXSJPTOrEKk/ycSZ0AOgTmkDtkOsvIA==}\n\n  '@types/estree@1.0.8':\n    resolution: {integrity: sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==}\n\n  '@types/json-schema@7.0.15':\n    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}\n\n  '@types/webidl-conversions@7.0.3':\n    resolution: {integrity: sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA==}\n\n  '@types/whatwg-url@11.0.5':\n    resolution: {integrity: sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==}\n\n  accepts@2.0.0:\n    resolution: {integrity: sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==}\n    engines: {node: '>= 0.6'}\n\n  acorn-jsx@5.3.2:\n    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}\n    peerDependencies:\n      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0\n\n  acorn@8.15.0:\n    resolution: {integrity: sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==}\n    engines: {node: '>=0.4.0'}\n    hasBin: true\n\n  agent-base@7.1.4:\n    resolution: {integrity: sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==}\n    engines: {node: '>= 14'}\n\n  ajv@6.12.6:\n    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}\n\n  amp-message@0.1.2:\n    resolution: {integrity: sha512-JqutcFwoU1+jhv7ArgW38bqrE+LQdcRv4NxNw0mp0JHQyB6tXesWRjtYKlDgHRY2o3JE5UTaBGUK8kSWUdxWUg==}\n\n  amp@0.3.1:\n    resolution: {integrity: sha512-OwIuC4yZaRogHKiuU5WlMR5Xk/jAcpPtawWL05Gj8Lvm2F6mwoJt4O/bHI+DHwG79vWd+8OFYM4/BzYqyRd3qw==}\n\n  ansi-colors@4.1.3:\n    resolution: {integrity: sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==}\n    engines: {node: '>=6'}\n\n  ansi-styles@4.3.0:\n    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}\n    engines: {node: '>=8'}\n\n  ansis@4.0.0-node10:\n    resolution: {integrity: sha512-BRrU0Bo1X9dFGw6KgGz6hWrqQuOlVEDOzkb0QSLZY9sXHqA7pNj7yHPVJRz7y/rj4EOJ3d/D5uxH+ee9leYgsg==}\n    engines: {node: '>=10'}\n\n  anymatch@3.1.3:\n    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}\n    engines: {node: '>= 8'}\n\n  argparse@2.0.1:\n    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}\n\n  ast-types@0.13.4:\n    resolution: {integrity: sha512-x1FCFnFifvYDDzTaLII71vG5uvDwgtmDTEVWAxrgeiR8VjMONcCXJx7E+USjDtHlwFmt9MysbqgF9b9Vjr6w+w==}\n    engines: {node: '>=4'}\n\n  async@2.6.4:\n    resolution: {integrity: sha512-mzo5dfJYwAn29PeiJ0zvwTo04zj8HDJj0Mn8TD7sno7q12prdbnasKJHhkm2c1LgrhlJ0teaea8860oxi51mGA==}\n\n  async@3.2.6:\n    resolution: {integrity: sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==}\n\n  balanced-match@1.0.2:\n    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}\n\n  basic-ftp@5.0.5:\n    resolution: {integrity: sha512-4Bcg1P8xhUuqcii/S0Z9wiHIrQVPMermM1any+MX5GeGD7faD3/msQUDGLol9wOcz4/jbg/WJnGqoJF6LiBdtg==}\n    engines: {node: '>=10.0.0'}\n\n  bcrypt@6.0.0:\n    resolution: {integrity: sha512-cU8v/EGSrnH+HnxV2z0J7/blxH8gq7Xh2JFT6Aroax7UohdmiJJlxApMxtKfuI7z68NvvVcmR78k2LbT6efhRg==}\n    engines: {node: '>= 18'}\n\n  binary-extensions@2.3.0:\n    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}\n    engines: {node: '>=8'}\n\n  blessed@0.1.81:\n    resolution: {integrity: sha512-LoF5gae+hlmfORcG1M5+5XZi4LBmvlXTzwJWzUlPryN/SJdSflZvROM2TwkT0GMpq7oqT48NRd4GS7BiVBc5OQ==}\n    engines: {node: '>= 0.8.0'}\n    hasBin: true\n\n  bodec@0.1.0:\n    resolution: {integrity: sha512-Ylo+MAo5BDUq1KA3f3R/MFhh+g8cnHmo8bz3YPGhI1znrMaf77ol1sfvYJzsw3nTE+Y2GryfDxBaR+AqpAkEHQ==}\n\n  body-parser@2.2.0:\n    resolution: {integrity: sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==}\n    engines: {node: '>=18'}\n\n  brace-expansion@1.1.12:\n    resolution: {integrity: sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==}\n\n  braces@3.0.3:\n    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}\n    engines: {node: '>=8'}\n\n  bson@6.10.4:\n    resolution: {integrity: sha512-WIsKqkSC0ABoBJuT1LEX+2HEvNmNKKgnTAyd0fL8qzK4SH2i9NXg+t08YtdZp/V9IZ33cxe3iV4yM0qg8lMQng==}\n    engines: {node: '>=16.20.1'}\n\n  buffer-equal-constant-time@1.0.1:\n    resolution: {integrity: sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==}\n\n  buffer-from@1.1.2:\n    resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}\n\n  bytes@3.1.2:\n    resolution: {integrity: sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==}\n    engines: {node: '>= 0.8'}\n\n  call-bind-apply-helpers@1.0.2:\n    resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}\n    engines: {node: '>= 0.4'}\n\n  call-bound@1.0.4:\n    resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}\n    engines: {node: '>= 0.4'}\n\n  callsites@3.1.0:\n    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}\n    engines: {node: '>=6'}\n\n  chalk@3.0.0:\n    resolution: {integrity: sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==}\n    engines: {node: '>=8'}\n\n  chalk@4.1.2:\n    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}\n    engines: {node: '>=10'}\n\n  charm@0.1.2:\n    resolution: {integrity: sha512-syedaZ9cPe7r3hoQA9twWYKu5AIyCswN5+szkmPBe9ccdLrj4bYaCnLVPTLd2kgVRc7+zoX4tyPgRnFKCj5YjQ==}\n\n  chokidar@3.6.0:\n    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}\n    engines: {node: '>= 8.10.0'}\n\n  cli-tableau@2.0.1:\n    resolution: {integrity: sha512-he+WTicka9cl0Fg/y+YyxcN6/bfQ/1O3QmgxRXDhABKqLzvoOSM4fMzp39uMyLBulAFuywD2N7UaoQE7WaADxQ==}\n    engines: {node: '>=8.10.0'}\n\n  color-convert@2.0.1:\n    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}\n    engines: {node: '>=7.0.0'}\n\n  color-name@1.1.4:\n    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}\n\n  commander@2.15.1:\n    resolution: {integrity: sha512-VlfT9F3V0v+jr4yxPc5gg9s62/fIVWsd2Bk2iD435um1NlGMYdVCq+MjcXnhYq2icNOizHr1kK+5TI6H0Hy0ag==}\n\n  concat-map@0.0.1:\n    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}\n\n  content-disposition@1.0.0:\n    resolution: {integrity: sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==}\n    engines: {node: '>= 0.6'}\n\n  content-type@1.0.5:\n    resolution: {integrity: sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==}\n    engines: {node: '>= 0.6'}\n\n  cookie-parser@1.4.7:\n    resolution: {integrity: sha512-nGUvgXnotP3BsjiLX2ypbQnWoGUPIIfHQNZkkC668ntrzGWEZVW70HDEB1qnNGMicPje6EttlIgzo51YSwNQGw==}\n    engines: {node: '>= 0.8.0'}\n\n  cookie-signature@1.0.6:\n    resolution: {integrity: sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==}\n\n  cookie-signature@1.2.2:\n    resolution: {integrity: sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==}\n    engines: {node: '>=6.6.0'}\n\n  cookie@0.7.2:\n    resolution: {integrity: sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==}\n    engines: {node: '>= 0.6'}\n\n  cors@2.8.5:\n    resolution: {integrity: sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==}\n    engines: {node: '>= 0.10'}\n\n  croner@4.1.97:\n    resolution: {integrity: sha512-/f6gpQuxDaqXu+1kwQYSckUglPaOrHdbIlBAu0YuW8/Cdb45XwXYNUBXg3r/9Mo6n540Kn/smKcZWko5x99KrQ==}\n\n  cross-spawn@7.0.6:\n    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}\n    engines: {node: '>= 8'}\n\n  culvert@0.1.2:\n    resolution: {integrity: sha512-yi1x3EAWKjQTreYWeSd98431AV+IEE0qoDyOoaHJ7KJ21gv6HtBXHVLX74opVSGqcR8/AbjJBHAHpcOy2bj5Gg==}\n\n  data-uri-to-buffer@6.0.2:\n    resolution: {integrity: sha512-7hvf7/GW8e86rW0ptuwS3OcBGDjIi6SZva7hCyWC0yYry2cOPmLIjXAUHI6DK2HsnwJd9ifmt57i8eV2n4YNpw==}\n    engines: {node: '>= 14'}\n\n  dayjs@1.11.18:\n    resolution: {integrity: sha512-zFBQ7WFRvVRhKcWoUh+ZA1g2HVgUbsZm9sbddh8EC5iv93sui8DVVz1Npvz+r6meo9VKfa8NyLWBsQK1VvIKPA==}\n\n  dayjs@1.8.36:\n    resolution: {integrity: sha512-3VmRXEtw7RZKAf+4Tv1Ym9AGeo8r8+CjDi26x+7SYQil1UqtqdaokhzoEJohqlzt0m5kacJSDhJQkG/LWhpRBw==}\n\n  debug@3.2.7:\n    resolution: {integrity: sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==}\n    peerDependencies:\n      supports-color: '*'\n    peerDependenciesMeta:\n      supports-color:\n        optional: true\n\n  debug@4.3.7:\n    resolution: {integrity: sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==}\n    engines: {node: '>=6.0'}\n    peerDependencies:\n      supports-color: '*'\n    peerDependenciesMeta:\n      supports-color:\n        optional: true\n\n  debug@4.4.1:\n    resolution: {integrity: sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==}\n    engines: {node: '>=6.0'}\n    peerDependencies:\n      supports-color: '*'\n    peerDependenciesMeta:\n      supports-color:\n        optional: true\n\n  deep-is@0.1.4:\n    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}\n\n  degenerator@5.0.1:\n    resolution: {integrity: sha512-TllpMR/t0M5sqCXfj85i4XaAzxmS5tVA16dqvdkMwGmzI+dXLXnw3J+3Vdv7VKw+ThlTMboK6i9rnZ6Nntj5CQ==}\n    engines: {node: '>= 14'}\n\n  depd@2.0.0:\n    resolution: {integrity: sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==}\n    engines: {node: '>= 0.8'}\n\n  dotenv@17.2.1:\n    resolution: {integrity: sha512-kQhDYKZecqnM0fCnzI5eIv5L4cAe/iRI+HqMbO/hbRdTAeXDG+M9FjipUxNfbARuEg4iHIbhnhs78BCHNbSxEQ==}\n    engines: {node: '>=12'}\n\n  dunder-proto@1.0.1:\n    resolution: {integrity: sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==}\n    engines: {node: '>= 0.4'}\n\n  ecdsa-sig-formatter@1.0.11:\n    resolution: {integrity: sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==}\n\n  ee-first@1.1.1:\n    resolution: {integrity: sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==}\n\n  encodeurl@2.0.0:\n    resolution: {integrity: sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==}\n    engines: {node: '>= 0.8'}\n\n  enquirer@2.3.6:\n    resolution: {integrity: sha512-yjNnPr315/FjS4zIsUxYguYUPP2e1NK4d7E7ZOLiyYCcbFBiTMyID+2wvm2w6+pZ/odMA7cRkjhsPbltwBOrLg==}\n    engines: {node: '>=8.6'}\n\n  es-define-property@1.0.1:\n    resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}\n    engines: {node: '>= 0.4'}\n\n  es-errors@1.3.0:\n    resolution: {integrity: sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==}\n    engines: {node: '>= 0.4'}\n\n  es-object-atoms@1.1.1:\n    resolution: {integrity: sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==}\n    engines: {node: '>= 0.4'}\n\n  escape-html@1.0.3:\n    resolution: {integrity: sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==}\n\n  escape-string-regexp@4.0.0:\n    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}\n    engines: {node: '>=10'}\n\n  escodegen@2.1.0:\n    resolution: {integrity: sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==}\n    engines: {node: '>=6.0'}\n    hasBin: true\n\n  eslint-scope@8.4.0:\n    resolution: {integrity: sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  eslint-visitor-keys@3.4.3:\n    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}\n    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}\n\n  eslint-visitor-keys@4.2.1:\n    resolution: {integrity: sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  eslint@9.34.0:\n    resolution: {integrity: sha512-RNCHRX5EwdrESy3Jc9o8ie8Bog+PeYvvSR8sDGoZxNFTvZ4dlxUB3WzQ3bQMztFrSRODGrLLj8g6OFuGY/aiQg==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n    hasBin: true\n    peerDependencies:\n      jiti: '*'\n    peerDependenciesMeta:\n      jiti:\n        optional: true\n\n  espree@10.4.0:\n    resolution: {integrity: sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==}\n    engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}\n\n  esprima@4.0.1:\n    resolution: {integrity: sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==}\n    engines: {node: '>=4'}\n    hasBin: true\n\n  esquery@1.6.0:\n    resolution: {integrity: sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==}\n    engines: {node: '>=0.10'}\n\n  esrecurse@4.3.0:\n    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}\n    engines: {node: '>=4.0'}\n\n  estraverse@5.3.0:\n    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}\n    engines: {node: '>=4.0'}\n\n  esutils@2.0.3:\n    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}\n    engines: {node: '>=0.10.0'}\n\n  etag@1.8.1:\n    resolution: {integrity: sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==}\n    engines: {node: '>= 0.6'}\n\n  eventemitter2@5.0.1:\n    resolution: {integrity: sha512-5EM1GHXycJBS6mauYAbVKT1cVs7POKWb2NXD4Vyt8dDqeZa7LaDK1/sjtL+Zb0lzTpSNil4596Dyu97hz37QLg==}\n\n  eventemitter2@6.4.9:\n    resolution: {integrity: sha512-JEPTiaOt9f04oa6NOkc4aH+nVp5I3wEjpHbIPqfgCdD5v5bUzy7xQqwcVO2aDQgOWhI28da57HksMrzK9HlRxg==}\n\n  express@5.1.0:\n    resolution: {integrity: sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==}\n    engines: {node: '>= 18'}\n\n  extrareqp2@1.0.0:\n    resolution: {integrity: sha512-Gum0g1QYb6wpPJCVypWP3bbIuaibcFiJcpuPM10YSXp/tzqi84x9PJageob+eN4xVRIOto4wjSGNLyMD54D2xA==}\n\n  fast-deep-equal@3.1.3:\n    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}\n\n  fast-json-patch@3.1.1:\n    resolution: {integrity: sha512-vf6IHUX2SBcA+5/+4883dsIjpBTqmfBjmYiWK1savxQmFk4JfBMLa7ynTYOs1Rolp/T1betJxHiGD3g1Mn8lUQ==}\n\n  fast-json-stable-stringify@2.1.0:\n    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}\n\n  fast-levenshtein@2.0.6:\n    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}\n\n  fclone@1.0.11:\n    resolution: {integrity: sha512-GDqVQezKzRABdeqflsgMr7ktzgF9CyS+p2oe0jJqUY6izSSbhPIQJDpoU4PtGcD7VPM9xh/dVrTu6z1nwgmEGw==}\n\n  file-entry-cache@8.0.0:\n    resolution: {integrity: sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==}\n    engines: {node: '>=16.0.0'}\n\n  fill-range@7.1.1:\n    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}\n    engines: {node: '>=8'}\n\n  finalhandler@2.1.0:\n    resolution: {integrity: sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==}\n    engines: {node: '>= 0.8'}\n\n  find-up@5.0.0:\n    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}\n    engines: {node: '>=10'}\n\n  flat-cache@4.0.1:\n    resolution: {integrity: sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==}\n    engines: {node: '>=16'}\n\n  flatted@3.3.3:\n    resolution: {integrity: sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==}\n\n  follow-redirects@1.15.11:\n    resolution: {integrity: sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==}\n    engines: {node: '>=4.0'}\n    peerDependencies:\n      debug: '*'\n    peerDependenciesMeta:\n      debug:\n        optional: true\n\n  forwarded@0.2.0:\n    resolution: {integrity: sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==}\n    engines: {node: '>= 0.6'}\n\n  fresh@2.0.0:\n    resolution: {integrity: sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==}\n    engines: {node: '>= 0.8'}\n\n  fsevents@2.3.3:\n    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}\n    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}\n    os: [darwin]\n\n  function-bind@1.1.2:\n    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}\n\n  get-intrinsic@1.3.0:\n    resolution: {integrity: sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==}\n    engines: {node: '>= 0.4'}\n\n  get-proto@1.0.1:\n    resolution: {integrity: sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==}\n    engines: {node: '>= 0.4'}\n\n  get-uri@6.0.5:\n    resolution: {integrity: sha512-b1O07XYq8eRuVzBNgJLstU6FYc1tS6wnMtF1I1D9lE8LxZSOGZ7LhxN54yPP6mGw5f2CkXY2BQUL9Fx41qvcIg==}\n    engines: {node: '>= 14'}\n\n  git-node-fs@1.0.0:\n    resolution: {integrity: sha512-bLQypt14llVXBg0S0u8q8HmU7g9p3ysH+NvVlae5vILuUvs759665HvmR5+wb04KjHyjFcDRxdYb4kyNnluMUQ==}\n    peerDependencies:\n      js-git: ^0.7.8\n    peerDependenciesMeta:\n      js-git:\n        optional: true\n\n  git-sha1@0.1.2:\n    resolution: {integrity: sha512-2e/nZezdVlyCopOCYHeW0onkbZg7xP1Ad6pndPy1rCygeRykefUS6r7oA5cJRGEFvseiaz5a/qUHFVX1dd6Isg==}\n\n  glob-parent@5.1.2:\n    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}\n    engines: {node: '>= 6'}\n\n  glob-parent@6.0.2:\n    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}\n    engines: {node: '>=10.13.0'}\n\n  globals@14.0.0:\n    resolution: {integrity: sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==}\n    engines: {node: '>=18'}\n\n  gopd@1.2.0:\n    resolution: {integrity: sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==}\n    engines: {node: '>= 0.4'}\n\n  has-flag@3.0.0:\n    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}\n    engines: {node: '>=4'}\n\n  has-flag@4.0.0:\n    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}\n    engines: {node: '>=8'}\n\n  has-symbols@1.1.0:\n    resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}\n    engines: {node: '>= 0.4'}\n\n  hasown@2.0.2:\n    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}\n    engines: {node: '>= 0.4'}\n\n  http-errors@2.0.0:\n    resolution: {integrity: sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==}\n    engines: {node: '>= 0.8'}\n\n  http-proxy-agent@7.0.2:\n    resolution: {integrity: sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==}\n    engines: {node: '>= 14'}\n\n  https-proxy-agent@7.0.6:\n    resolution: {integrity: sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==}\n    engines: {node: '>= 14'}\n\n  iconv-lite@0.4.24:\n    resolution: {integrity: sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==}\n    engines: {node: '>=0.10.0'}\n\n  iconv-lite@0.6.3:\n    resolution: {integrity: sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==}\n    engines: {node: '>=0.10.0'}\n\n  ignore-by-default@1.0.1:\n    resolution: {integrity: sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==}\n\n  ignore@5.3.2:\n    resolution: {integrity: sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==}\n    engines: {node: '>= 4'}\n\n  import-fresh@3.3.1:\n    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}\n    engines: {node: '>=6'}\n\n  imurmurhash@0.1.4:\n    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}\n    engines: {node: '>=0.8.19'}\n\n  inherits@2.0.4:\n    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}\n\n  ini@1.3.8:\n    resolution: {integrity: sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==}\n\n  ip-address@10.0.1:\n    resolution: {integrity: sha512-NWv9YLW4PoW2B7xtzaS3NCot75m6nK7Icdv0o3lfMceJVRfSoQwqD4wEH5rLwoKJwUiZ/rfpiVBhnaF0FK4HoA==}\n    engines: {node: '>= 12'}\n\n  ipaddr.js@1.9.1:\n    resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}\n    engines: {node: '>= 0.10'}\n\n  is-binary-path@2.1.0:\n    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}\n    engines: {node: '>=8'}\n\n  is-core-module@2.16.1:\n    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}\n    engines: {node: '>= 0.4'}\n\n  is-extglob@2.1.1:\n    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}\n    engines: {node: '>=0.10.0'}\n\n  is-glob@4.0.3:\n    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}\n    engines: {node: '>=0.10.0'}\n\n  is-number@7.0.0:\n    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}\n    engines: {node: '>=0.12.0'}\n\n  is-promise@4.0.0:\n    resolution: {integrity: sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==}\n\n  isexe@2.0.0:\n    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}\n\n  js-git@0.7.8:\n    resolution: {integrity: sha512-+E5ZH/HeRnoc/LW0AmAyhU+mNcWBzAKE+30+IDMLSLbbK+Tdt02AdkOKq9u15rlJsDEGFqtgckc8ZM59LhhiUA==}\n\n  js-yaml@4.1.0:\n    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}\n    hasBin: true\n\n  json-buffer@3.0.1:\n    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}\n\n  json-schema-traverse@0.4.1:\n    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}\n\n  json-stable-stringify-without-jsonify@1.0.1:\n    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}\n\n  json-stringify-safe@5.0.1:\n    resolution: {integrity: sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==}\n\n  jsonwebtoken@9.0.2:\n    resolution: {integrity: sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==}\n    engines: {node: '>=12', npm: '>=6'}\n\n  jwa@1.4.2:\n    resolution: {integrity: sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==}\n\n  jws@3.2.2:\n    resolution: {integrity: sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==}\n\n  kareem@2.6.3:\n    resolution: {integrity: sha512-C3iHfuGUXK2u8/ipq9LfjFfXFxAZMQJJq7vLS45r3D9Y2xQ/m4S8zaR4zMLFWh9AsNPXmcFfUDhTEO8UIC/V6Q==}\n    engines: {node: '>=12.0.0'}\n\n  keyv@4.5.4:\n    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}\n\n  levn@0.4.1:\n    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}\n    engines: {node: '>= 0.8.0'}\n\n  locate-path@6.0.0:\n    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}\n    engines: {node: '>=10'}\n\n  lodash.includes@4.3.0:\n    resolution: {integrity: sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==}\n\n  lodash.isboolean@3.0.3:\n    resolution: {integrity: sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==}\n\n  lodash.isinteger@4.0.4:\n    resolution: {integrity: sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==}\n\n  lodash.isnumber@3.0.3:\n    resolution: {integrity: sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==}\n\n  lodash.isplainobject@4.0.6:\n    resolution: {integrity: sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==}\n\n  lodash.isstring@4.0.1:\n    resolution: {integrity: sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==}\n\n  lodash.merge@4.6.2:\n    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}\n\n  lodash.once@4.1.1:\n    resolution: {integrity: sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==}\n\n  lodash@4.17.21:\n    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}\n\n  lru-cache@6.0.0:\n    resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}\n    engines: {node: '>=10'}\n\n  lru-cache@7.18.3:\n    resolution: {integrity: sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==}\n    engines: {node: '>=12'}\n\n  math-intrinsics@1.1.0:\n    resolution: {integrity: sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==}\n    engines: {node: '>= 0.4'}\n\n  media-typer@1.1.0:\n    resolution: {integrity: sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==}\n    engines: {node: '>= 0.8'}\n\n  memory-pager@1.5.0:\n    resolution: {integrity: sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==}\n\n  merge-descriptors@2.0.0:\n    resolution: {integrity: sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==}\n    engines: {node: '>=18'}\n\n  mime-db@1.54.0:\n    resolution: {integrity: sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==}\n    engines: {node: '>= 0.6'}\n\n  mime-types@3.0.1:\n    resolution: {integrity: sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==}\n    engines: {node: '>= 0.6'}\n\n  minimatch@3.1.2:\n    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}\n\n  mkdirp@1.0.4:\n    resolution: {integrity: sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==}\n    engines: {node: '>=10'}\n    hasBin: true\n\n  module-details-from-path@1.0.4:\n    resolution: {integrity: sha512-EGWKgxALGMgzvxYF1UyGTy0HXX/2vHLkw6+NvDKW2jypWbHpjQuj4UMcqQWXHERJhVGKikolT06G3bcKe4fi7w==}\n\n  mongodb-connection-string-url@3.0.2:\n    resolution: {integrity: sha512-rMO7CGo/9BFwyZABcKAWL8UJwH/Kc2x0g72uhDWzG48URRax5TCIcJ7Rc3RZqffZzO/Gwff/jyKwCU9TN8gehA==}\n\n  mongodb@6.18.0:\n    resolution: {integrity: sha512-fO5ttN9VC8P0F5fqtQmclAkgXZxbIkYRTUi1j8JO6IYwvamkhtYDilJr35jOPELR49zqCJgXZWwCtW7B+TM8vQ==}\n    engines: {node: '>=16.20.1'}\n    peerDependencies:\n      '@aws-sdk/credential-providers': ^3.188.0\n      '@mongodb-js/zstd': ^1.1.0 || ^2.0.0\n      gcp-metadata: ^5.2.0\n      kerberos: ^2.0.1\n      mongodb-client-encryption: '>=6.0.0 <7'\n      snappy: ^7.2.2\n      socks: ^2.7.1\n    peerDependenciesMeta:\n      '@aws-sdk/credential-providers':\n        optional: true\n      '@mongodb-js/zstd':\n        optional: true\n      gcp-metadata:\n        optional: true\n      kerberos:\n        optional: true\n      mongodb-client-encryption:\n        optional: true\n      snappy:\n        optional: true\n      socks:\n        optional: true\n\n  mongoose@8.18.0:\n    resolution: {integrity: sha512-3TixPihQKBdyaYDeJqRjzgb86KbilEH07JmzV8SoSjgoskNTpa6oTBmDxeoF9p8YnWQoz7shnCyPkSV/48y3yw==}\n    engines: {node: '>=16.20.1'}\n\n  mpath@0.9.0:\n    resolution: {integrity: sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==}\n    engines: {node: '>=4.0.0'}\n\n  mquery@5.0.0:\n    resolution: {integrity: sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==}\n    engines: {node: '>=14.0.0'}\n\n  ms@2.1.3:\n    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}\n\n  mute-stream@0.0.8:\n    resolution: {integrity: sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==}\n\n  natural-compare@1.4.0:\n    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}\n\n  needle@2.4.0:\n    resolution: {integrity: sha512-4Hnwzr3mi5L97hMYeNl8wRW/Onhy4nUKR/lVemJ8gJedxxUyBLm9kkrDColJvoSfwi0jCNhD+xCdOtiGDQiRZg==}\n    engines: {node: '>= 4.4.x'}\n    hasBin: true\n\n  negotiator@1.0.0:\n    resolution: {integrity: sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==}\n    engines: {node: '>= 0.6'}\n\n  netmask@2.0.2:\n    resolution: {integrity: sha512-dBpDMdxv9Irdq66304OLfEmQ9tbNRFnFTuZiLo+bD+r332bBmMJ8GBLXklIXXgxd3+v9+KUnZaUR5PJMa75Gsg==}\n    engines: {node: '>= 0.4.0'}\n\n  node-addon-api@8.5.0:\n    resolution: {integrity: sha512-/bRZty2mXUIFY/xU5HLvveNHlswNJej+RnxBjOMkidWfwZzgTbPG1E3K5TOxRLOR+5hX7bSofy8yf1hZevMS8A==}\n    engines: {node: ^18 || ^20 || >= 21}\n\n  node-gyp-build@4.8.4:\n    resolution: {integrity: sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==}\n    hasBin: true\n\n  nodemon@3.1.10:\n    resolution: {integrity: sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==}\n    engines: {node: '>=10'}\n    hasBin: true\n\n  normalize-path@3.0.0:\n    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}\n    engines: {node: '>=0.10.0'}\n\n  object-assign@4.1.1:\n    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}\n    engines: {node: '>=0.10.0'}\n\n  object-inspect@1.13.4:\n    resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}\n    engines: {node: '>= 0.4'}\n\n  on-finished@2.4.1:\n    resolution: {integrity: sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==}\n    engines: {node: '>= 0.8'}\n\n  once@1.4.0:\n    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}\n\n  optionator@0.9.4:\n    resolution: {integrity: sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==}\n    engines: {node: '>= 0.8.0'}\n\n  p-limit@3.1.0:\n    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}\n    engines: {node: '>=10'}\n\n  p-locate@5.0.0:\n    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}\n    engines: {node: '>=10'}\n\n  pac-proxy-agent@7.2.0:\n    resolution: {integrity: sha512-TEB8ESquiLMc0lV8vcd5Ql/JAKAoyzHFXaStwjkzpOpC5Yv+pIzLfHvjTSdf3vpa2bMiUQrg9i6276yn8666aA==}\n    engines: {node: '>= 14'}\n\n  pac-resolver@7.0.1:\n    resolution: {integrity: sha512-5NPgf87AT2STgwa2ntRMr45jTKrYBGkVU36yT0ig/n/GMAa3oPqhZfIQ2kMEimReg0+t9kZViDVZ83qfVUlckg==}\n    engines: {node: '>= 14'}\n\n  pako@0.2.9:\n    resolution: {integrity: sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA==}\n\n  parent-module@1.0.1:\n    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}\n    engines: {node: '>=6'}\n\n  parseurl@1.3.3:\n    resolution: {integrity: sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==}\n    engines: {node: '>= 0.8'}\n\n  path-exists@4.0.0:\n    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}\n    engines: {node: '>=8'}\n\n  path-key@3.1.1:\n    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}\n    engines: {node: '>=8'}\n\n  path-parse@1.0.7:\n    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}\n\n  path-to-regexp@8.2.0:\n    resolution: {integrity: sha512-TdrF7fW9Rphjq4RjrW0Kp2AW0Ahwu9sRGTkS6bvDi0SCwZlEZYmcfDbEsTz8RVk0EHIS/Vd1bv3JhG+1xZuAyQ==}\n    engines: {node: '>=16'}\n\n  picomatch@2.3.1:\n    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}\n    engines: {node: '>=8.6'}\n\n  pidusage@2.0.21:\n    resolution: {integrity: sha512-cv3xAQos+pugVX+BfXpHsbyz/dLzX+lr44zNMsYiGxUw+kV5sgQCIcLd1z+0vq+KyC7dJ+/ts2PsfgWfSC3WXA==}\n    engines: {node: '>=8'}\n\n  pidusage@3.0.2:\n    resolution: {integrity: sha512-g0VU+y08pKw5M8EZ2rIGiEBaB8wrQMjYGFfW2QVIfyT8V+fq8YFLkvlz4bz5ljvFDJYNFCWT3PWqcRr2FKO81w==}\n    engines: {node: '>=10'}\n\n  pm2-axon-rpc@0.7.1:\n    resolution: {integrity: sha512-FbLvW60w+vEyvMjP/xom2UPhUN/2bVpdtLfKJeYM3gwzYhoTEEChCOICfFzxkxuoEleOlnpjie+n1nue91bDQw==}\n    engines: {node: '>=5'}\n\n  pm2-axon@4.0.1:\n    resolution: {integrity: sha512-kES/PeSLS8orT8dR5jMlNl+Yu4Ty3nbvZRmaAtROuVm9nYYGiaoXqqKQqQYzWQzMYWUKHMQTvBlirjE5GIIxqg==}\n    engines: {node: '>=5'}\n\n  pm2-deploy@1.0.2:\n    resolution: {integrity: sha512-YJx6RXKrVrWaphEYf++EdOOx9EH18vM8RSZN/P1Y+NokTKqYAca/ejXwVLyiEpNju4HPZEk3Y2uZouwMqUlcgg==}\n    engines: {node: '>=4.0.0'}\n\n  pm2-multimeter@0.1.2:\n    resolution: {integrity: sha512-S+wT6XfyKfd7SJIBqRgOctGxaBzUOmVQzTAS+cg04TsEUObJVreha7lvCfX8zzGVr871XwCSnHUU7DQQ5xEsfA==}\n\n  pm2-sysmonit@1.2.8:\n    resolution: {integrity: sha512-ACOhlONEXdCTVwKieBIQLSi2tQZ8eKinhcr9JpZSUAL8Qy0ajIgRtsLxG/lwPOW3JEKqPyw/UaHmTWhUzpP4kA==}\n\n  pm2@6.0.8:\n    resolution: {integrity: sha512-y7sO+UuGjfESK/ChRN+efJKAsHrBd95GY2p1GQfjVTtOfFtUfiW0NOuUhP5dN5QTF2F0EWcepgkLqbF32j90Iw==}\n    engines: {node: '>=16.0.0'}\n    hasBin: true\n\n  prelude-ls@1.2.1:\n    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}\n    engines: {node: '>= 0.8.0'}\n\n  promptly@2.2.0:\n    resolution: {integrity: sha512-aC9j+BZsRSSzEsXBNBwDnAxujdx19HycZoKgRgzWnS8eOHg1asuf9heuLprfbe739zY3IdUQx+Egv6Jn135WHA==}\n\n  proxy-addr@2.0.7:\n    resolution: {integrity: sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==}\n    engines: {node: '>= 0.10'}\n\n  proxy-agent@6.4.0:\n    resolution: {integrity: sha512-u0piLU+nCOHMgGjRbimiXmA9kM/L9EHh3zL81xCdp7m+Y2pHIsnmbdDoEDoAz5geaonNR6q6+yOPQs6n4T6sBQ==}\n    engines: {node: '>= 14'}\n\n  proxy-from-env@1.1.0:\n    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}\n\n  pstree.remy@1.1.8:\n    resolution: {integrity: sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==}\n\n  punycode@2.3.1:\n    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}\n    engines: {node: '>=6'}\n\n  qs@6.14.0:\n    resolution: {integrity: sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==}\n    engines: {node: '>=0.6'}\n\n  range-parser@1.2.1:\n    resolution: {integrity: sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==}\n    engines: {node: '>= 0.6'}\n\n  raw-body@3.0.0:\n    resolution: {integrity: sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==}\n    engines: {node: '>= 0.8'}\n\n  read@1.0.7:\n    resolution: {integrity: sha512-rSOKNYUmaxy0om1BNjMN4ezNT6VKK+2xF4GBhc81mkH7L60i6dp8qPYrkndNLT3QPphoII3maL9PVC9XmhHwVQ==}\n    engines: {node: '>=0.8'}\n\n  readdirp@3.6.0:\n    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}\n    engines: {node: '>=8.10.0'}\n\n  require-in-the-middle@5.2.0:\n    resolution: {integrity: sha512-efCx3b+0Z69/LGJmm9Yvi4cqEdxnoGnxYxGxBghkkTTFeXRtTCmmhO0AnAfHz59k957uTSuy8WaHqOs8wbYUWg==}\n    engines: {node: '>=6'}\n\n  resolve-from@4.0.0:\n    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}\n    engines: {node: '>=4'}\n\n  resolve@1.22.10:\n    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}\n    engines: {node: '>= 0.4'}\n    hasBin: true\n\n  router@2.2.0:\n    resolution: {integrity: sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==}\n    engines: {node: '>= 18'}\n\n  run-series@1.1.9:\n    resolution: {integrity: sha512-Arc4hUN896vjkqCYrUXquBFtRZdv1PfLbTYP71efP6butxyQ0kWpiNJyAgsxscmQg1cqvHY32/UCBzXedTpU2g==}\n\n  safe-buffer@5.2.1:\n    resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}\n\n  safer-buffer@2.1.2:\n    resolution: {integrity: sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==}\n\n  sax@1.4.1:\n    resolution: {integrity: sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==}\n\n  semver@7.5.4:\n    resolution: {integrity: sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==}\n    engines: {node: '>=10'}\n    hasBin: true\n\n  semver@7.7.2:\n    resolution: {integrity: sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==}\n    engines: {node: '>=10'}\n    hasBin: true\n\n  send@1.2.0:\n    resolution: {integrity: sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==}\n    engines: {node: '>= 18'}\n\n  serve-static@2.2.0:\n    resolution: {integrity: sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==}\n    engines: {node: '>= 18'}\n\n  setprototypeof@1.2.0:\n    resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}\n\n  shebang-command@2.0.0:\n    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}\n    engines: {node: '>=8'}\n\n  shebang-regex@3.0.0:\n    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}\n    engines: {node: '>=8'}\n\n  shimmer@1.2.1:\n    resolution: {integrity: sha512-sQTKC1Re/rM6XyFM6fIAGHRPVGvyXfgzIDvzoq608vM+jeyVD0Tu1E6Np0Kc2zAIFWIj963V2800iF/9LPieQw==}\n\n  side-channel-list@1.0.0:\n    resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}\n    engines: {node: '>= 0.4'}\n\n  side-channel-map@1.0.1:\n    resolution: {integrity: sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==}\n    engines: {node: '>= 0.4'}\n\n  side-channel-weakmap@1.0.2:\n    resolution: {integrity: sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==}\n    engines: {node: '>= 0.4'}\n\n  side-channel@1.1.0:\n    resolution: {integrity: sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==}\n    engines: {node: '>= 0.4'}\n\n  sift@17.1.3:\n    resolution: {integrity: sha512-Rtlj66/b0ICeFzYTuNvX/EF1igRbbnGSvEyT79McoZa/DeGhMyC5pWKOEsZKnpkqtSeovd5FL/bjHWC3CIIvCQ==}\n\n  signal-exit@3.0.7:\n    resolution: {integrity: sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==}\n\n  simple-update-notifier@2.0.0:\n    resolution: {integrity: sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==}\n    engines: {node: '>=10'}\n\n  smart-buffer@4.2.0:\n    resolution: {integrity: sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==}\n    engines: {node: '>= 6.0.0', npm: '>= 3.0.0'}\n\n  socks-proxy-agent@8.0.5:\n    resolution: {integrity: sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==}\n    engines: {node: '>= 14'}\n\n  socks@2.8.7:\n    resolution: {integrity: sha512-HLpt+uLy/pxB+bum/9DzAgiKS8CX1EvbWxI4zlmgGCExImLdiad2iCwXT5Z4c9c3Eq8rP2318mPW2c+QbtjK8A==}\n    engines: {node: '>= 10.0.0', npm: '>= 3.0.0'}\n\n  source-map-support@0.5.21:\n    resolution: {integrity: sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==}\n\n  source-map@0.6.1:\n    resolution: {integrity: sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==}\n    engines: {node: '>=0.10.0'}\n\n  sparse-bitfield@3.0.3:\n    resolution: {integrity: sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==}\n\n  sprintf-js@1.1.2:\n    resolution: {integrity: sha512-VE0SOVEHCk7Qc8ulkWw3ntAzXuqf7S2lvwQaDLRnUeIEaKNQJzV6BwmLKhOqT61aGhfUMrXeaBk+oDGCzvhcug==}\n\n  statuses@2.0.1:\n    resolution: {integrity: sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==}\n    engines: {node: '>= 0.8'}\n\n  statuses@2.0.2:\n    resolution: {integrity: sha512-DvEy55V3DB7uknRo+4iOGT5fP1slR8wQohVdknigZPMpMstaKJQWhwiYBACJE3Ul2pTnATihhBYnRhZQHGBiRw==}\n    engines: {node: '>= 0.8'}\n\n  strip-json-comments@3.1.1:\n    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}\n    engines: {node: '>=8'}\n\n  supports-color@5.5.0:\n    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}\n    engines: {node: '>=4'}\n\n  supports-color@7.2.0:\n    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}\n    engines: {node: '>=8'}\n\n  supports-preserve-symlinks-flag@1.0.0:\n    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}\n    engines: {node: '>= 0.4'}\n\n  systeminformation@5.27.8:\n    resolution: {integrity: sha512-d3Z0gaQO1MlUxzDUKsmXz5y4TOBCMZ8IyijzaYOykV3AcNOTQ7mT+tpndUOXYNSxzLK3la8G32xiUFvZ0/s6PA==}\n    engines: {node: '>=8.0.0'}\n    os: [darwin, linux, win32, freebsd, openbsd, netbsd, sunos, android]\n    hasBin: true\n\n  to-regex-range@5.0.1:\n    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}\n    engines: {node: '>=8.0'}\n\n  toidentifier@1.0.1:\n    resolution: {integrity: sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==}\n    engines: {node: '>=0.6'}\n\n  touch@3.1.1:\n    resolution: {integrity: sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==}\n    hasBin: true\n\n  tr46@5.1.1:\n    resolution: {integrity: sha512-hdF5ZgjTqgAntKkklYw0R03MG2x/bSzTtkxmIRw/sTNV8YXsCJ1tfLAX23lhxhHJlEf3CRCOCGGWw3vI3GaSPw==}\n    engines: {node: '>=18'}\n\n  tslib@1.9.3:\n    resolution: {integrity: sha512-4krF8scpejhaOgqzBEcGM7yDIEfi0/8+8zDRZhNZZ2kjmHJ4hv3zCbQWxoJGz1iw5U0Jl0nma13xzHXcncMavQ==}\n\n  tslib@2.8.1:\n    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}\n\n  tv4@1.3.0:\n    resolution: {integrity: sha512-afizzfpJgvPr+eDkREK4MxJ/+r8nEEHcmitwgnPUqpaP+FpwQyadnxNoSACbgc/b1LsZYtODGoPiFxQrgJgjvw==}\n    engines: {node: '>= 0.8.0'}\n\n  tx2@1.0.5:\n    resolution: {integrity: sha512-sJ24w0y03Md/bxzK4FU8J8JveYYUbSs2FViLJ2D/8bytSiyPRbuE3DyL/9UKYXTZlV3yXq0L8GLlhobTnekCVg==}\n\n  type-check@0.4.0:\n    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}\n    engines: {node: '>= 0.8.0'}\n\n  type-is@2.0.1:\n    resolution: {integrity: sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==}\n    engines: {node: '>= 0.6'}\n\n  undefsafe@2.0.5:\n    resolution: {integrity: sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==}\n\n  unpipe@1.0.0:\n    resolution: {integrity: sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==}\n    engines: {node: '>= 0.8'}\n\n  uri-js@4.4.1:\n    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}\n\n  vary@1.1.2:\n    resolution: {integrity: sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==}\n    engines: {node: '>= 0.8'}\n\n  vizion@2.2.1:\n    resolution: {integrity: sha512-sfAcO2yeSU0CSPFI/DmZp3FsFE9T+8913nv1xWBOyzODv13fwkn6Vl7HqxGpkr9F608M+8SuFId3s+BlZqfXww==}\n    engines: {node: '>=4.0'}\n\n  webidl-conversions@7.0.0:\n    resolution: {integrity: sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==}\n    engines: {node: '>=12'}\n\n  whatwg-url@14.2.0:\n    resolution: {integrity: sha512-De72GdQZzNTUBBChsXueQUnPKDkg/5A5zp7pFDuQAj5UFoENpiACU0wlCvzpAGnTkj++ihpKwKyYewn/XNUbKw==}\n    engines: {node: '>=18'}\n\n  which@2.0.2:\n    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}\n    engines: {node: '>= 8'}\n    hasBin: true\n\n  word-wrap@1.2.5:\n    resolution: {integrity: sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==}\n    engines: {node: '>=0.10.0'}\n\n  wrappy@1.0.2:\n    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}\n\n  ws@7.5.10:\n    resolution: {integrity: sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==}\n    engines: {node: '>=8.3.0'}\n    peerDependencies:\n      bufferutil: ^4.0.1\n      utf-8-validate: ^5.0.2\n    peerDependenciesMeta:\n      bufferutil:\n        optional: true\n      utf-8-validate:\n        optional: true\n\n  yallist@4.0.0:\n    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}\n\n  yocto-queue@0.1.0:\n    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}\n    engines: {node: '>=10'}\n\nsnapshots:\n\n  '@eslint-community/eslint-utils@4.8.0(eslint@9.34.0)':\n    dependencies:\n      eslint: 9.34.0\n      eslint-visitor-keys: 3.4.3\n\n  '@eslint-community/regexpp@4.12.1': {}\n\n  '@eslint/config-array@0.21.0':\n    dependencies:\n      '@eslint/object-schema': 2.1.6\n      debug: 4.4.1(supports-color@5.5.0)\n      minimatch: 3.1.2\n    transitivePeerDependencies:\n      - supports-color\n\n  '@eslint/config-helpers@0.3.1': {}\n\n  '@eslint/core@0.15.2':\n    dependencies:\n      '@types/json-schema': 7.0.15\n\n  '@eslint/eslintrc@3.3.1':\n    dependencies:\n      ajv: 6.12.6\n      debug: 4.4.1(supports-color@5.5.0)\n      espree: 10.4.0\n      globals: 14.0.0\n      ignore: 5.3.2\n      import-fresh: 3.3.1\n      js-yaml: 4.1.0\n      minimatch: 3.1.2\n      strip-json-comments: 3.1.1\n    transitivePeerDependencies:\n      - supports-color\n\n  '@eslint/js@9.34.0': {}\n\n  '@eslint/object-schema@2.1.6': {}\n\n  '@eslint/plugin-kit@0.3.5':\n    dependencies:\n      '@eslint/core': 0.15.2\n      levn: 0.4.1\n\n  '@humanfs/core@0.19.1': {}\n\n  '@humanfs/node@0.16.7':\n    dependencies:\n      '@humanfs/core': 0.19.1\n      '@humanwhocodes/retry': 0.4.3\n\n  '@humanwhocodes/module-importer@1.0.1': {}\n\n  '@humanwhocodes/retry@0.4.3': {}\n\n  '@mongodb-js/saslprep@1.3.0':\n    dependencies:\n      sparse-bitfield: 3.0.3\n\n  '@pm2/agent@2.1.1':\n    dependencies:\n      async: 3.2.6\n      chalk: 3.0.0\n      dayjs: 1.8.36\n      debug: 4.3.7\n      eventemitter2: 5.0.1\n      fast-json-patch: 3.1.1\n      fclone: 1.0.11\n      pm2-axon: 4.0.1\n      pm2-axon-rpc: 0.7.1\n      proxy-agent: 6.4.0\n      semver: 7.5.4\n      ws: 7.5.10\n    transitivePeerDependencies:\n      - bufferutil\n      - supports-color\n      - utf-8-validate\n\n  '@pm2/io@6.1.0':\n    dependencies:\n      async: 2.6.4\n      debug: 4.3.7\n      eventemitter2: 6.4.9\n      require-in-the-middle: 5.2.0\n      semver: 7.5.4\n      shimmer: 1.2.1\n      signal-exit: 3.0.7\n      tslib: 1.9.3\n    transitivePeerDependencies:\n      - supports-color\n\n  '@pm2/js-api@0.8.0':\n    dependencies:\n      async: 2.6.4\n      debug: 4.3.7\n      eventemitter2: 6.4.9\n      extrareqp2: 1.0.0(debug@4.3.7)\n      ws: 7.5.10\n    transitivePeerDependencies:\n      - bufferutil\n      - supports-color\n      - utf-8-validate\n\n  '@pm2/pm2-version-check@1.0.4':\n    dependencies:\n      debug: 4.4.1(supports-color@5.5.0)\n    transitivePeerDependencies:\n      - supports-color\n\n  '@tootallnate/quickjs-emscripten@0.23.0': {}\n\n  '@types/estree@1.0.8': {}\n\n  '@types/json-schema@7.0.15': {}\n\n  '@types/webidl-conversions@7.0.3': {}\n\n  '@types/whatwg-url@11.0.5':\n    dependencies:\n      '@types/webidl-conversions': 7.0.3\n\n  accepts@2.0.0:\n    dependencies:\n      mime-types: 3.0.1\n      negotiator: 1.0.0\n\n  acorn-jsx@5.3.2(acorn@8.15.0):\n    dependencies:\n      acorn: 8.15.0\n\n  acorn@8.15.0: {}\n\n  agent-base@7.1.4: {}\n\n  ajv@6.12.6:\n    dependencies:\n      fast-deep-equal: 3.1.3\n      fast-json-stable-stringify: 2.1.0\n      json-schema-traverse: 0.4.1\n      uri-js: 4.4.1\n\n  amp-message@0.1.2:\n    dependencies:\n      amp: 0.3.1\n\n  amp@0.3.1: {}\n\n  ansi-colors@4.1.3: {}\n\n  ansi-styles@4.3.0:\n    dependencies:\n      color-convert: 2.0.1\n\n  ansis@4.0.0-node10: {}\n\n  anymatch@3.1.3:\n    dependencies:\n      normalize-path: 3.0.0\n      picomatch: 2.3.1\n\n  argparse@2.0.1: {}\n\n  ast-types@0.13.4:\n    dependencies:\n      tslib: 2.8.1\n\n  async@2.6.4:\n    dependencies:\n      lodash: 4.17.21\n\n  async@3.2.6: {}\n\n  balanced-match@1.0.2: {}\n\n  basic-ftp@5.0.5: {}\n\n  bcrypt@6.0.0:\n    dependencies:\n      node-addon-api: 8.5.0\n      node-gyp-build: 4.8.4\n\n  binary-extensions@2.3.0: {}\n\n  blessed@0.1.81: {}\n\n  bodec@0.1.0: {}\n\n  body-parser@2.2.0:\n    dependencies:\n      bytes: 3.1.2\n      content-type: 1.0.5\n      debug: 4.4.1(supports-color@5.5.0)\n      http-errors: 2.0.0\n      iconv-lite: 0.6.3\n      on-finished: 2.4.1\n      qs: 6.14.0\n      raw-body: 3.0.0\n      type-is: 2.0.1\n    transitivePeerDependencies:\n      - supports-color\n\n  brace-expansion@1.1.12:\n    dependencies:\n      balanced-match: 1.0.2\n      concat-map: 0.0.1\n\n  braces@3.0.3:\n    dependencies:\n      fill-range: 7.1.1\n\n  bson@6.10.4: {}\n\n  buffer-equal-constant-time@1.0.1: {}\n\n  buffer-from@1.1.2: {}\n\n  bytes@3.1.2: {}\n\n  call-bind-apply-helpers@1.0.2:\n    dependencies:\n      es-errors: 1.3.0\n      function-bind: 1.1.2\n\n  call-bound@1.0.4:\n    dependencies:\n      call-bind-apply-helpers: 1.0.2\n      get-intrinsic: 1.3.0\n\n  callsites@3.1.0: {}\n\n  chalk@3.0.0:\n    dependencies:\n      ansi-styles: 4.3.0\n      supports-color: 7.2.0\n\n  chalk@4.1.2:\n    dependencies:\n      ansi-styles: 4.3.0\n      supports-color: 7.2.0\n\n  charm@0.1.2: {}\n\n  chokidar@3.6.0:\n    dependencies:\n      anymatch: 3.1.3\n      braces: 3.0.3\n      glob-parent: 5.1.2\n      is-binary-path: 2.1.0\n      is-glob: 4.0.3\n      normalize-path: 3.0.0\n      readdirp: 3.6.0\n    optionalDependencies:\n      fsevents: 2.3.3\n\n  cli-tableau@2.0.1:\n    dependencies:\n      chalk: 3.0.0\n\n  color-convert@2.0.1:\n    dependencies:\n      color-name: 1.1.4\n\n  color-name@1.1.4: {}\n\n  commander@2.15.1: {}\n\n  concat-map@0.0.1: {}\n\n  content-disposition@1.0.0:\n    dependencies:\n      safe-buffer: 5.2.1\n\n  content-type@1.0.5: {}\n\n  cookie-parser@1.4.7:\n    dependencies:\n      cookie: 0.7.2\n      cookie-signature: 1.0.6\n\n  cookie-signature@1.0.6: {}\n\n  cookie-signature@1.2.2: {}\n\n  cookie@0.7.2: {}\n\n  cors@2.8.5:\n    dependencies:\n      object-assign: 4.1.1\n      vary: 1.1.2\n\n  croner@4.1.97: {}\n\n  cross-spawn@7.0.6:\n    dependencies:\n      path-key: 3.1.1\n      shebang-command: 2.0.0\n      which: 2.0.2\n\n  culvert@0.1.2: {}\n\n  data-uri-to-buffer@6.0.2: {}\n\n  dayjs@1.11.18: {}\n\n  dayjs@1.8.36: {}\n\n  debug@3.2.7:\n    dependencies:\n      ms: 2.1.3\n\n  debug@4.3.7:\n    dependencies:\n      ms: 2.1.3\n\n  debug@4.4.1(supports-color@5.5.0):\n    dependencies:\n      ms: 2.1.3\n    optionalDependencies:\n      supports-color: 5.5.0\n\n  deep-is@0.1.4: {}\n\n  degenerator@5.0.1:\n    dependencies:\n      ast-types: 0.13.4\n      escodegen: 2.1.0\n      esprima: 4.0.1\n\n  depd@2.0.0: {}\n\n  dotenv@17.2.1: {}\n\n  dunder-proto@1.0.1:\n    dependencies:\n      call-bind-apply-helpers: 1.0.2\n      es-errors: 1.3.0\n      gopd: 1.2.0\n\n  ecdsa-sig-formatter@1.0.11:\n    dependencies:\n      safe-buffer: 5.2.1\n\n  ee-first@1.1.1: {}\n\n  encodeurl@2.0.0: {}\n\n  enquirer@2.3.6:\n    dependencies:\n      ansi-colors: 4.1.3\n\n  es-define-property@1.0.1: {}\n\n  es-errors@1.3.0: {}\n\n  es-object-atoms@1.1.1:\n    dependencies:\n      es-errors: 1.3.0\n\n  escape-html@1.0.3: {}\n\n  escape-string-regexp@4.0.0: {}\n\n  escodegen@2.1.0:\n    dependencies:\n      esprima: 4.0.1\n      estraverse: 5.3.0\n      esutils: 2.0.3\n    optionalDependencies:\n      source-map: 0.6.1\n\n  eslint-scope@8.4.0:\n    dependencies:\n      esrecurse: 4.3.0\n      estraverse: 5.3.0\n\n  eslint-visitor-keys@3.4.3: {}\n\n  eslint-visitor-keys@4.2.1: {}\n\n  eslint@9.34.0:\n    dependencies:\n      '@eslint-community/eslint-utils': 4.8.0(eslint@9.34.0)\n      '@eslint-community/regexpp': 4.12.1\n      '@eslint/config-array': 0.21.0\n      '@eslint/config-helpers': 0.3.1\n      '@eslint/core': 0.15.2\n      '@eslint/eslintrc': 3.3.1\n      '@eslint/js': 9.34.0\n      '@eslint/plugin-kit': 0.3.5\n      '@humanfs/node': 0.16.7\n      '@humanwhocodes/module-importer': 1.0.1\n      '@humanwhocodes/retry': 0.4.3\n      '@types/estree': 1.0.8\n      '@types/json-schema': 7.0.15\n      ajv: 6.12.6\n      chalk: 4.1.2\n      cross-spawn: 7.0.6\n      debug: 4.4.1(supports-color@5.5.0)\n      escape-string-regexp: 4.0.0\n      eslint-scope: 8.4.0\n      eslint-visitor-keys: 4.2.1\n      espree: 10.4.0\n      esquery: 1.6.0\n      esutils: 2.0.3\n      fast-deep-equal: 3.1.3\n      file-entry-cache: 8.0.0\n      find-up: 5.0.0\n      glob-parent: 6.0.2\n      ignore: 5.3.2\n      imurmurhash: 0.1.4\n      is-glob: 4.0.3\n      json-stable-stringify-without-jsonify: 1.0.1\n      lodash.merge: 4.6.2\n      minimatch: 3.1.2\n      natural-compare: 1.4.0\n      optionator: 0.9.4\n    transitivePeerDependencies:\n      - supports-color\n\n  espree@10.4.0:\n    dependencies:\n      acorn: 8.15.0\n      acorn-jsx: 5.3.2(acorn@8.15.0)\n      eslint-visitor-keys: 4.2.1\n\n  esprima@4.0.1: {}\n\n  esquery@1.6.0:\n    dependencies:\n      estraverse: 5.3.0\n\n  esrecurse@4.3.0:\n    dependencies:\n      estraverse: 5.3.0\n\n  estraverse@5.3.0: {}\n\n  esutils@2.0.3: {}\n\n  etag@1.8.1: {}\n\n  eventemitter2@5.0.1: {}\n\n  eventemitter2@6.4.9: {}\n\n  express@5.1.0:\n    dependencies:\n      accepts: 2.0.0\n      body-parser: 2.2.0\n      content-disposition: 1.0.0\n      content-type: 1.0.5\n      cookie: 0.7.2\n      cookie-signature: 1.2.2\n      debug: 4.4.1(supports-color@5.5.0)\n      encodeurl: 2.0.0\n      escape-html: 1.0.3\n      etag: 1.8.1\n      finalhandler: 2.1.0\n      fresh: 2.0.0\n      http-errors: 2.0.0\n      merge-descriptors: 2.0.0\n      mime-types: 3.0.1\n      on-finished: 2.4.1\n      once: 1.4.0\n      parseurl: 1.3.3\n      proxy-addr: 2.0.7\n      qs: 6.14.0\n      range-parser: 1.2.1\n      router: 2.2.0\n      send: 1.2.0\n      serve-static: 2.2.0\n      statuses: 2.0.2\n      type-is: 2.0.1\n      vary: 1.1.2\n    transitivePeerDependencies:\n      - supports-color\n\n  extrareqp2@1.0.0(debug@4.3.7):\n    dependencies:\n      follow-redirects: 1.15.11(debug@4.3.7)\n    transitivePeerDependencies:\n      - debug\n\n  fast-deep-equal@3.1.3: {}\n\n  fast-json-patch@3.1.1: {}\n\n  fast-json-stable-stringify@2.1.0: {}\n\n  fast-levenshtein@2.0.6: {}\n\n  fclone@1.0.11: {}\n\n  file-entry-cache@8.0.0:\n    dependencies:\n      flat-cache: 4.0.1\n\n  fill-range@7.1.1:\n    dependencies:\n      to-regex-range: 5.0.1\n\n  finalhandler@2.1.0:\n    dependencies:\n      debug: 4.4.1(supports-color@5.5.0)\n      encodeurl: 2.0.0\n      escape-html: 1.0.3\n      on-finished: 2.4.1\n      parseurl: 1.3.3\n      statuses: 2.0.2\n    transitivePeerDependencies:\n      - supports-color\n\n  find-up@5.0.0:\n    dependencies:\n      locate-path: 6.0.0\n      path-exists: 4.0.0\n\n  flat-cache@4.0.1:\n    dependencies:\n      flatted: 3.3.3\n      keyv: 4.5.4\n\n  flatted@3.3.3: {}\n\n  follow-redirects@1.15.11(debug@4.3.7):\n    optionalDependencies:\n      debug: 4.3.7\n\n  forwarded@0.2.0: {}\n\n  fresh@2.0.0: {}\n\n  fsevents@2.3.3:\n    optional: true\n\n  function-bind@1.1.2: {}\n\n  get-intrinsic@1.3.0:\n    dependencies:\n      call-bind-apply-helpers: 1.0.2\n      es-define-property: 1.0.1\n      es-errors: 1.3.0\n      es-object-atoms: 1.1.1\n      function-bind: 1.1.2\n      get-proto: 1.0.1\n      gopd: 1.2.0\n      has-symbols: 1.1.0\n      hasown: 2.0.2\n      math-intrinsics: 1.1.0\n\n  get-proto@1.0.1:\n    dependencies:\n      dunder-proto: 1.0.1\n      es-object-atoms: 1.1.1\n\n  get-uri@6.0.5:\n    dependencies:\n      basic-ftp: 5.0.5\n      data-uri-to-buffer: 6.0.2\n      debug: 4.4.1(supports-color@5.5.0)\n    transitivePeerDependencies:\n      - supports-color\n\n  git-node-fs@1.0.0(js-git@0.7.8):\n    optionalDependencies:\n      js-git: 0.7.8\n\n  git-sha1@0.1.2: {}\n\n  glob-parent@5.1.2:\n    dependencies:\n      is-glob: 4.0.3\n\n  glob-parent@6.0.2:\n    dependencies:\n      is-glob: 4.0.3\n\n  globals@14.0.0: {}\n\n  gopd@1.2.0: {}\n\n  has-flag@3.0.0: {}\n\n  has-flag@4.0.0: {}\n\n  has-symbols@1.1.0: {}\n\n  hasown@2.0.2:\n    dependencies:\n      function-bind: 1.1.2\n\n  http-errors@2.0.0:\n    dependencies:\n      depd: 2.0.0\n      inherits: 2.0.4\n      setprototypeof: 1.2.0\n      statuses: 2.0.1\n      toidentifier: 1.0.1\n\n  http-proxy-agent@7.0.2:\n    dependencies:\n      agent-base: 7.1.4\n      debug: 4.4.1(supports-color@5.5.0)\n    transitivePeerDependencies:\n      - supports-color\n\n  https-proxy-agent@7.0.6:\n    dependencies:\n      agent-base: 7.1.4\n      debug: 4.4.1(supports-color@5.5.0)\n    transitivePeerDependencies:\n      - supports-color\n\n  iconv-lite@0.4.24:\n    dependencies:\n      safer-buffer: 2.1.2\n\n  iconv-lite@0.6.3:\n    dependencies:\n      safer-buffer: 2.1.2\n\n  ignore-by-default@1.0.1: {}\n\n  ignore@5.3.2: {}\n\n  import-fresh@3.3.1:\n    dependencies:\n      parent-module: 1.0.1\n      resolve-from: 4.0.0\n\n  imurmurhash@0.1.4: {}\n\n  inherits@2.0.4: {}\n\n  ini@1.3.8: {}\n\n  ip-address@10.0.1: {}\n\n  ipaddr.js@1.9.1: {}\n\n  is-binary-path@2.1.0:\n    dependencies:\n      binary-extensions: 2.3.0\n\n  is-core-module@2.16.1:\n    dependencies:\n      hasown: 2.0.2\n\n  is-extglob@2.1.1: {}\n\n  is-glob@4.0.3:\n    dependencies:\n      is-extglob: 2.1.1\n\n  is-number@7.0.0: {}\n\n  is-promise@4.0.0: {}\n\n  isexe@2.0.0: {}\n\n  js-git@0.7.8:\n    dependencies:\n      bodec: 0.1.0\n      culvert: 0.1.2\n      git-sha1: 0.1.2\n      pako: 0.2.9\n\n  js-yaml@4.1.0:\n    dependencies:\n      argparse: 2.0.1\n\n  json-buffer@3.0.1: {}\n\n  json-schema-traverse@0.4.1: {}\n\n  json-stable-stringify-without-jsonify@1.0.1: {}\n\n  json-stringify-safe@5.0.1:\n    optional: true\n\n  jsonwebtoken@9.0.2:\n    dependencies:\n      jws: 3.2.2\n      lodash.includes: 4.3.0\n      lodash.isboolean: 3.0.3\n      lodash.isinteger: 4.0.4\n      lodash.isnumber: 3.0.3\n      lodash.isplainobject: 4.0.6\n      lodash.isstring: 4.0.1\n      lodash.once: 4.1.1\n      ms: 2.1.3\n      semver: 7.7.2\n\n  jwa@1.4.2:\n    dependencies:\n      buffer-equal-constant-time: 1.0.1\n      ecdsa-sig-formatter: 1.0.11\n      safe-buffer: 5.2.1\n\n  jws@3.2.2:\n    dependencies:\n      jwa: 1.4.2\n      safe-buffer: 5.2.1\n\n  kareem@2.6.3: {}\n\n  keyv@4.5.4:\n    dependencies:\n      json-buffer: 3.0.1\n\n  levn@0.4.1:\n    dependencies:\n      prelude-ls: 1.2.1\n      type-check: 0.4.0\n\n  locate-path@6.0.0:\n    dependencies:\n      p-locate: 5.0.0\n\n  lodash.includes@4.3.0: {}\n\n  lodash.isboolean@3.0.3: {}\n\n  lodash.isinteger@4.0.4: {}\n\n  lodash.isnumber@3.0.3: {}\n\n  lodash.isplainobject@4.0.6: {}\n\n  lodash.isstring@4.0.1: {}\n\n  lodash.merge@4.6.2: {}\n\n  lodash.once@4.1.1: {}\n\n  lodash@4.17.21: {}\n\n  lru-cache@6.0.0:\n    dependencies:\n      yallist: 4.0.0\n\n  lru-cache@7.18.3: {}\n\n  math-intrinsics@1.1.0: {}\n\n  media-typer@1.1.0: {}\n\n  memory-pager@1.5.0: {}\n\n  merge-descriptors@2.0.0: {}\n\n  mime-db@1.54.0: {}\n\n  mime-types@3.0.1:\n    dependencies:\n      mime-db: 1.54.0\n\n  minimatch@3.1.2:\n    dependencies:\n      brace-expansion: 1.1.12\n\n  mkdirp@1.0.4: {}\n\n  module-details-from-path@1.0.4: {}\n\n  mongodb-connection-string-url@3.0.2:\n    dependencies:\n      '@types/whatwg-url': 11.0.5\n      whatwg-url: 14.2.0\n\n  mongodb@6.18.0(socks@2.8.7):\n    dependencies:\n      '@mongodb-js/saslprep': 1.3.0\n      bson: 6.10.4\n      mongodb-connection-string-url: 3.0.2\n    optionalDependencies:\n      socks: 2.8.7\n\n  mongoose@8.18.0(socks@2.8.7):\n    dependencies:\n      bson: 6.10.4\n      kareem: 2.6.3\n      mongodb: 6.18.0(socks@2.8.7)\n      mpath: 0.9.0\n      mquery: 5.0.0\n      ms: 2.1.3\n      sift: 17.1.3\n    transitivePeerDependencies:\n      - '@aws-sdk/credential-providers'\n      - '@mongodb-js/zstd'\n      - gcp-metadata\n      - kerberos\n      - mongodb-client-encryption\n      - snappy\n      - socks\n      - supports-color\n\n  mpath@0.9.0: {}\n\n  mquery@5.0.0:\n    dependencies:\n      debug: 4.4.1(supports-color@5.5.0)\n    transitivePeerDependencies:\n      - supports-color\n\n  ms@2.1.3: {}\n\n  mute-stream@0.0.8: {}\n\n  natural-compare@1.4.0: {}\n\n  needle@2.4.0:\n    dependencies:\n      debug: 3.2.7\n      iconv-lite: 0.4.24\n      sax: 1.4.1\n    transitivePeerDependencies:\n      - supports-color\n\n  negotiator@1.0.0: {}\n\n  netmask@2.0.2: {}\n\n  node-addon-api@8.5.0: {}\n\n  node-gyp-build@4.8.4: {}\n\n  nodemon@3.1.10:\n    dependencies:\n      chokidar: 3.6.0\n      debug: 4.4.1(supports-color@5.5.0)\n      ignore-by-default: 1.0.1\n      minimatch: 3.1.2\n      pstree.remy: 1.1.8\n      semver: 7.7.2\n      simple-update-notifier: 2.0.0\n      supports-color: 5.5.0\n      touch: 3.1.1\n      undefsafe: 2.0.5\n\n  normalize-path@3.0.0: {}\n\n  object-assign@4.1.1: {}\n\n  object-inspect@1.13.4: {}\n\n  on-finished@2.4.1:\n    dependencies:\n      ee-first: 1.1.1\n\n  once@1.4.0:\n    dependencies:\n      wrappy: 1.0.2\n\n  optionator@0.9.4:\n    dependencies:\n      deep-is: 0.1.4\n      fast-levenshtein: 2.0.6\n      levn: 0.4.1\n      prelude-ls: 1.2.1\n      type-check: 0.4.0\n      word-wrap: 1.2.5\n\n  p-limit@3.1.0:\n    dependencies:\n      yocto-queue: 0.1.0\n\n  p-locate@5.0.0:\n    dependencies:\n      p-limit: 3.1.0\n\n  pac-proxy-agent@7.2.0:\n    dependencies:\n      '@tootallnate/quickjs-emscripten': 0.23.0\n      agent-base: 7.1.4\n      debug: 4.4.1(supports-color@5.5.0)\n      get-uri: 6.0.5\n      http-proxy-agent: 7.0.2\n      https-proxy-agent: 7.0.6\n      pac-resolver: 7.0.1\n      socks-proxy-agent: 8.0.5\n    transitivePeerDependencies:\n      - supports-color\n\n  pac-resolver@7.0.1:\n    dependencies:\n      degenerator: 5.0.1\n      netmask: 2.0.2\n\n  pako@0.2.9: {}\n\n  parent-module@1.0.1:\n    dependencies:\n      callsites: 3.1.0\n\n  parseurl@1.3.3: {}\n\n  path-exists@4.0.0: {}\n\n  path-key@3.1.1: {}\n\n  path-parse@1.0.7: {}\n\n  path-to-regexp@8.2.0: {}\n\n  picomatch@2.3.1: {}\n\n  pidusage@2.0.21:\n    dependencies:\n      safe-buffer: 5.2.1\n    optional: true\n\n  pidusage@3.0.2:\n    dependencies:\n      safe-buffer: 5.2.1\n\n  pm2-axon-rpc@0.7.1:\n    dependencies:\n      debug: 4.4.1(supports-color@5.5.0)\n    transitivePeerDependencies:\n      - supports-color\n\n  pm2-axon@4.0.1:\n    dependencies:\n      amp: 0.3.1\n      amp-message: 0.1.2\n      debug: 4.4.1(supports-color@5.5.0)\n      escape-string-regexp: 4.0.0\n    transitivePeerDependencies:\n      - supports-color\n\n  pm2-deploy@1.0.2:\n    dependencies:\n      run-series: 1.1.9\n      tv4: 1.3.0\n\n  pm2-multimeter@0.1.2:\n    dependencies:\n      charm: 0.1.2\n\n  pm2-sysmonit@1.2.8:\n    dependencies:\n      async: 3.2.6\n      debug: 4.4.1(supports-color@5.5.0)\n      pidusage: 2.0.21\n      systeminformation: 5.27.8\n      tx2: 1.0.5\n    transitivePeerDependencies:\n      - supports-color\n    optional: true\n\n  pm2@6.0.8:\n    dependencies:\n      '@pm2/agent': 2.1.1\n      '@pm2/io': 6.1.0\n      '@pm2/js-api': 0.8.0\n      '@pm2/pm2-version-check': 1.0.4\n      ansis: 4.0.0-node10\n      async: 3.2.6\n      blessed: 0.1.81\n      chokidar: 3.6.0\n      cli-tableau: 2.0.1\n      commander: 2.15.1\n      croner: 4.1.97\n      dayjs: 1.11.18\n      debug: 4.4.1(supports-color@5.5.0)\n      enquirer: 2.3.6\n      eventemitter2: 5.0.1\n      fclone: 1.0.11\n      js-yaml: 4.1.0\n      mkdirp: 1.0.4\n      needle: 2.4.0\n      pidusage: 3.0.2\n      pm2-axon: 4.0.1\n      pm2-axon-rpc: 0.7.1\n      pm2-deploy: 1.0.2\n      pm2-multimeter: 0.1.2\n      promptly: 2.2.0\n      semver: 7.7.2\n      source-map-support: 0.5.21\n      sprintf-js: 1.1.2\n      vizion: 2.2.1\n    optionalDependencies:\n      pm2-sysmonit: 1.2.8\n    transitivePeerDependencies:\n      - bufferutil\n      - supports-color\n      - utf-8-validate\n\n  prelude-ls@1.2.1: {}\n\n  promptly@2.2.0:\n    dependencies:\n      read: 1.0.7\n\n  proxy-addr@2.0.7:\n    dependencies:\n      forwarded: 0.2.0\n      ipaddr.js: 1.9.1\n\n  proxy-agent@6.4.0:\n    dependencies:\n      agent-base: 7.1.4\n      debug: 4.4.1(supports-color@5.5.0)\n      http-proxy-agent: 7.0.2\n      https-proxy-agent: 7.0.6\n      lru-cache: 7.18.3\n      pac-proxy-agent: 7.2.0\n      proxy-from-env: 1.1.0\n      socks-proxy-agent: 8.0.5\n    transitivePeerDependencies:\n      - supports-color\n\n  proxy-from-env@1.1.0: {}\n\n  pstree.remy@1.1.8: {}\n\n  punycode@2.3.1: {}\n\n  qs@6.14.0:\n    dependencies:\n      side-channel: 1.1.0\n\n  range-parser@1.2.1: {}\n\n  raw-body@3.0.0:\n    dependencies:\n      bytes: 3.1.2\n      http-errors: 2.0.0\n      iconv-lite: 0.6.3\n      unpipe: 1.0.0\n\n  read@1.0.7:\n    dependencies:\n      mute-stream: 0.0.8\n\n  readdirp@3.6.0:\n    dependencies:\n      picomatch: 2.3.1\n\n  require-in-the-middle@5.2.0:\n    dependencies:\n      debug: 4.4.1(supports-color@5.5.0)\n      module-details-from-path: 1.0.4\n      resolve: 1.22.10\n    transitivePeerDependencies:\n      - supports-color\n\n  resolve-from@4.0.0: {}\n\n  resolve@1.22.10:\n    dependencies:\n      is-core-module: 2.16.1\n      path-parse: 1.0.7\n      supports-preserve-symlinks-flag: 1.0.0\n\n  router@2.2.0:\n    dependencies:\n      debug: 4.4.1(supports-color@5.5.0)\n      depd: 2.0.0\n      is-promise: 4.0.0\n      parseurl: 1.3.3\n      path-to-regexp: 8.2.0\n    transitivePeerDependencies:\n      - supports-color\n\n  run-series@1.1.9: {}\n\n  safe-buffer@5.2.1: {}\n\n  safer-buffer@2.1.2: {}\n\n  sax@1.4.1: {}\n\n  semver@7.5.4:\n    dependencies:\n      lru-cache: 6.0.0\n\n  semver@7.7.2: {}\n\n  send@1.2.0:\n    dependencies:\n      debug: 4.4.1(supports-color@5.5.0)\n      encodeurl: 2.0.0\n      escape-html: 1.0.3\n      etag: 1.8.1\n      fresh: 2.0.0\n      http-errors: 2.0.0\n      mime-types: 3.0.1\n      ms: 2.1.3\n      on-finished: 2.4.1\n      range-parser: 1.2.1\n      statuses: 2.0.2\n    transitivePeerDependencies:\n      - supports-color\n\n  serve-static@2.2.0:\n    dependencies:\n      encodeurl: 2.0.0\n      escape-html: 1.0.3\n      parseurl: 1.3.3\n      send: 1.2.0\n    transitivePeerDependencies:\n      - supports-color\n\n  setprototypeof@1.2.0: {}\n\n  shebang-command@2.0.0:\n    dependencies:\n      shebang-regex: 3.0.0\n\n  shebang-regex@3.0.0: {}\n\n  shimmer@1.2.1: {}\n\n  side-channel-list@1.0.0:\n    dependencies:\n      es-errors: 1.3.0\n      object-inspect: 1.13.4\n\n  side-channel-map@1.0.1:\n    dependencies:\n      call-bound: 1.0.4\n      es-errors: 1.3.0\n      get-intrinsic: 1.3.0\n      object-inspect: 1.13.4\n\n  side-channel-weakmap@1.0.2:\n    dependencies:\n      call-bound: 1.0.4\n      es-errors: 1.3.0\n      get-intrinsic: 1.3.0\n      object-inspect: 1.13.4\n      side-channel-map: 1.0.1\n\n  side-channel@1.1.0:\n    dependencies:\n      es-errors: 1.3.0\n      object-inspect: 1.13.4\n      side-channel-list: 1.0.0\n      side-channel-map: 1.0.1\n      side-channel-weakmap: 1.0.2\n\n  sift@17.1.3: {}\n\n  signal-exit@3.0.7: {}\n\n  simple-update-notifier@2.0.0:\n    dependencies:\n      semver: 7.7.2\n\n  smart-buffer@4.2.0: {}\n\n  socks-proxy-agent@8.0.5:\n    dependencies:\n      agent-base: 7.1.4\n      debug: 4.4.1(supports-color@5.5.0)\n      socks: 2.8.7\n    transitivePeerDependencies:\n      - supports-color\n\n  socks@2.8.7:\n    dependencies:\n      ip-address: 10.0.1\n      smart-buffer: 4.2.0\n\n  source-map-support@0.5.21:\n    dependencies:\n      buffer-from: 1.1.2\n      source-map: 0.6.1\n\n  source-map@0.6.1: {}\n\n  sparse-bitfield@3.0.3:\n    dependencies:\n      memory-pager: 1.5.0\n\n  sprintf-js@1.1.2: {}\n\n  statuses@2.0.1: {}\n\n  statuses@2.0.2: {}\n\n  strip-json-comments@3.1.1: {}\n\n  supports-color@5.5.0:\n    dependencies:\n      has-flag: 3.0.0\n\n  supports-color@7.2.0:\n    dependencies:\n      has-flag: 4.0.0\n\n  supports-preserve-symlinks-flag@1.0.0: {}\n\n  systeminformation@5.27.8:\n    optional: true\n\n  to-regex-range@5.0.1:\n    dependencies:\n      is-number: 7.0.0\n\n  toidentifier@1.0.1: {}\n\n  touch@3.1.1: {}\n\n  tr46@5.1.1:\n    dependencies:\n      punycode: 2.3.1\n\n  tslib@1.9.3: {}\n\n  tslib@2.8.1: {}\n\n  tv4@1.3.0: {}\n\n  tx2@1.0.5:\n    dependencies:\n      json-stringify-safe: 5.0.1\n    optional: true\n\n  type-check@0.4.0:\n    dependencies:\n      prelude-ls: 1.2.1\n\n  type-is@2.0.1:\n    dependencies:\n      content-type: 1.0.5\n      media-typer: 1.1.0\n      mime-types: 3.0.1\n\n  undefsafe@2.0.5: {}\n\n  unpipe@1.0.0: {}\n\n  uri-js@4.4.1:\n    dependencies:\n      punycode: 2.3.1\n\n  vary@1.1.2: {}\n\n  vizion@2.2.1:\n    dependencies:\n      async: 2.6.4\n      git-node-fs: 1.0.0(js-git@0.7.8)\n      ini: 1.3.8\n      js-git: 0.7.8\n\n  webidl-conversions@7.0.0: {}\n\n  whatwg-url@14.2.0:\n    dependencies:\n      tr46: 5.1.1\n      webidl-conversions: 7.0.0\n\n  which@2.0.2:\n    dependencies:\n      isexe: 2.0.0\n\n  word-wrap@1.2.5: {}\n\n  wrappy@1.0.2: {}\n\n  ws@7.5.10: {}\n\n  yallist@4.0.0: {}\n\n  yocto-queue@0.1.0: {}\n","size_bytes":77036},"backend/Controller/AttendanceController.js":{"content":"const Attendance = require('../Models/Attendance');\nconst Student = require('../Models/Student');\n\n// Get All Attendance for a specific student\nconst getAllAttendance = async (req, res) => {\n    const studentID = req.params.id;\n    try {\n        const records = await Attendance.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\")\n        });// this will allow us to not have uppercase or lower case to have impact\n\n        res.status(200).json(records);\n    } catch (err) {\n        console.error(\"Error fetching all attendance:\", err);\n        res.status(500).json({ message: \"Server error while fetching attendance\" });\n    }\n};\n\nconst getAttendanceByDate = async (req, res) => {\n    const studentID = req.params.id;\n    const date = req.params.date;\n\n    try {\n        const recordsByDate = await Attendance.findOne({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            date: new Date(date),\n        });\n\n        if (!recordsByDate) {\n            return res.status(404).json({ message: \"No attendance record found for this date\" });\n        }\n\n        res.status(200).json(recordsByDate);\n    } catch (err) {\n        console.error(\"Error fetching attendance by date:\", err);\n        res.status(500).json({ message: \"Server error while fetching attendance\" });\n    }\n};\n\n// Get Attendance Summary\nconst AttendanceSummary = async (req, res) => {\n    const studentID = req.params.id;\n    try {\n        const totalPresent = await Attendance.countDocuments({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            status: \"Present\"\n        });\n        const totalAbsent = await Attendance.countDocuments({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            status: \"Absent\"\n        });\n        const totalDays = totalAbsent + totalPresent;\n        const percentage = totalDays ? ((totalPresent / totalDays) * 100).toFixed(2) : 0;\n\n        res.status(200).json({\n            totalPresent,\n            totalAbsent,\n            totalDays,\n            percentage: `${percentage}%`\n        });\n    } catch (error) {\n        console.error(\"Error fetching attendance summary:\", error);\n        res.status(500).json({ message: \"Server error while fetching summary\" });\n    }\n};\n\n// Get Attendance in Date Range\nconst AttendanceByRange = async (req, res) => {\n    const studentID = req.params.id;\n    const fromDate = req.query.fromDate;\n    const toDate = req.query.toDate;\n\n    try {\n        const records = await Attendance.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            date: {\n                $gte: new Date(fromDate),\n                $lte: new Date(toDate)\n            }\n        }).sort({ date: 1 });\n\n\n        if (records.length === 0) {\n            return res.status(404).json({ message: \"No attendance records found for this date range\" });\n        }\n\n        res.status(200).json(records);\n    } catch (error) {\n        console.error(\"Error fetching attendance:\", error);\n        res.status(500).json({ message: \"Server error while fetching attendance\" });\n    }\n};\n\nmodule.exports = {\n    getAllAttendance,\n    getAttendanceByDate,\n    AttendanceSummary,\n    AttendanceByRange,\n};","size_bytes":3174},"backend/Controller/CalendarController.js":{"content":"\nconst Calendar = require('../Models/Calendar');\n\n// 1️⃣ Get all calendar events\nconst getAllCalendarEvents = async (req, res) => {\n    const studentID = req.student.studentID; // 👈 get studentID from auth middleware\n    try {\n        const events = await Calendar.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\")\n        });\n        res.status(200).json(events);\n    } catch (err) {\n        console.error(\"Error fetching calendar events:\", err);\n        res.status(500).json({ message: \"Server error while fetching calendar events\" });\n    }\n};\n\n// 2️⃣ Get calendar events by date\nconst getCalendarByDate = async (req, res) => {\n    const studentID = req.student.studentID;\n    const date = req.params.date;\n\n    if (isNaN(new Date(date))) {\n        return res.status(400).json({ message: \"Invalid date format\" });\n    }\n\n    try {\n        const events = await Calendar.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            date: {\n                $gte: new Date(new Date(date).setHours(0, 0, 0, 0)),\n                $lt: new Date(new Date(date).setHours(23, 59, 59, 999))\n            }\n        });\n\n        if (events.length === 0) {\n            return res.status(404).json({ message: \"No events found for this date\" });\n        }\n\n        res.status(200).json(events);\n    } catch (err) {\n        console.error(\"Error fetching calendar by date:\", err);\n        res.status(500).json({ message: \"Server error while fetching calendar\" });\n    }\n};\n\n// 3️⃣ Get calendar events in date range\nconst getCalendarByRange = async (req, res) => {\n    const studentID = req.student.studentID;\n    const fromDate = req.query.fromDate;\n    const toDate = req.query.toDate;\n\n    if (!fromDate || !toDate) {\n        return res.status(400).json({ message: \"fromDate and toDate are required\" });\n    }\n\n    if (isNaN(new Date(fromDate)) || isNaN(new Date(toDate))) {\n        return res.status(400).json({ message: \"Invalid date format\" });\n    }\n\n    try {\n        const events = await Calendar.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            date: {\n                $gte: new Date(new Date(fromDate).setHours(0, 0, 0, 0)),\n                $lte: new Date(new Date(toDate).setHours(23, 59, 59, 999))\n            }\n        });\n\n        if (events.length === 0) {\n            return res.status(404).json({ message: \"No events found in this date range\" });\n        }\n\n        res.status(200).json(events);\n    } catch (err) {\n        console.error(\"Error fetching calendar by range:\", err);\n        res.status(500).json({ message: \"Server error while fetching calendar\" });\n    }\n};\n\nmodule.exports = {\n    getCalendarByRange,\n    getCalendarByDate,\n    getAllCalendarEvents\n};\n","size_bytes":2741},"backend/Controller/HomeworkController.js":{"content":"\nconst Homework = require('../Models/Homework');\n\n// Get All Homework for a specific student\nconst getAllHomework = async (req, res) => {\n    const studentID = req.params.id;\n    try {\n        const records = await Homework.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\")\n        });\n        res.status(200).json(records);\n    } catch (error) {\n        console.error(\"Error fetching all Homework:\", error);\n        res.status(500).json({ message: \"Server error while fetching Homework\" });\n    }\n};\n\n// Get Homework By Date (ignores time, only matches date)\nconst getHomeworkByDate = async (req, res) => {\n    const studentID = req.params.id;\n    const dateParam = req.params.date;\n\n    try {\n        const startDate = new Date(dateParam);\n        const endDate = new Date(dateParam);\n        endDate.setHours(23, 59, 59, 999);\n\n        const recordsByDate = await Homework.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            date: { $gte: startDate, $lte: endDate }\n        });\n\n        if (recordsByDate.length === 0) {\n            return res.status(404).json({ message: \"No Homework record found for this date\" });\n        }\n\n        res.status(200).json(recordsByDate);\n    } catch (error) {\n        console.error(\"Error fetching Homework by date:\", error);\n        res.status(500).json({ message: \"Server error while fetching Homework\" });\n    }\n};\n\n// Get Homework in Date Range\nconst getHomeworkByRange = async (req, res) => {\n    const studentID = req.params.id;\n    const fromDate = req.query.fromDate;\n    const toDate = req.query.toDate;\n\n    if (!fromDate || !toDate) {\n        return res.status(400).json({ message: \"Both fromDate and toDate are required\" });\n    }\n\n    try {\n        const startDate = new Date(fromDate);\n        const endDate = new Date(toDate);\n        endDate.setHours(23, 59, 59, 999);\n\n        const records = await Homework.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            date: { $gte: startDate, $lte: endDate }\n        });\n\n        if (records.length === 0) {\n            return res.status(404).json({ message: \"No Homework records found for this date range\" });\n        }\n\n        res.status(200).json(records);\n    } catch (error) {\n        console.error(\"Error fetching Homework:\", error);\n        res.status(500).json({ message: \"Server error while fetching Homework\" });\n    }\n};\n\nmodule.exports = {\n    getAllHomework,\n    getHomeworkByDate,\n    getHomeworkByRange\n};\n","size_bytes":2483},"backend/Controller/MarksController.js":{"content":"\nconst Marks = require('../Models/Marks');\n\n// 1️⃣ Get Marks of All Semesters\nconst getAllSemesterMarks = async (req, res) => {\n    const studentID = req.params.id;\n    try {\n        const allMarks = await Marks.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\")\n        });\n        if (allMarks.length === 0) {\n            return res.status(404).json({ message: \"No marks found for this student\" });\n        }\n        res.status(200).json(allMarks);\n    } catch (error) {\n        console.error(\"Error fetching all semester marks:\", error);\n        res.status(500).json({ message: \"Server error while fetching marks\" });\n    }\n};\n\n// 2️⃣ Get Marks of a Specific Semester\nconst getMarksByExamType = async (req, res) => {\n    const studentID = req.params.id;\n    const semester = req.params.semester;\n\n    try {\n        const semesterMarks = await Marks.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            semester\n        });\n        if (semesterMarks.length === 0) {\n            return res.status(404).json({ message: `No marks found for Semester ${semester}` });\n        }\n        res.status(200).json(semesterMarks);\n    } catch (error) {\n        console.error(\"Error fetching semester marks:\", error);\n        res.status(500).json({ message: \"Server error while fetching marks\" });\n    }\n};\n\nmodule.exports = {\n    getAllSemesterMarks,\n    getMarksByExamType\n};\n","size_bytes":1411},"backend/Controller/NoticeController.js":{"content":"\nconst Notice = require('../Models/Notice');\n\n// GET FULL NOTICE\nconst getFullNotice = async (req, res) => {\n    const studentID = req.params.id;\n    try {\n        const fullNotice = await Notice.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\")\n        });\n        if (fullNotice.length === 0) {\n            return res.status(404).json({ message: \"The Notice was not found\" });\n        }\n        res.status(200).json(fullNotice);\n    } catch (error) {\n        console.error(\"Error fetching full notice:\", error);\n        res.status(500).json({ message: \"Server error while fetching notices\" });\n    }\n};\n\n//GET NOTICE BY DATE\nconst getNoticeByDate = async (req, res) => {\n    const studentID = req.params.id;\n    const fromDate = req.query.fromDate;\n    const toDate = req.query.toDate;\n    try {\n        const NoticeByDate = await Notice.find({\n            studentID: new RegExp(`^${studentID}$`, \"i\"),\n            date: { $gte: new Date(fromDate), $lte: new Date(toDate) }\n        });\n        if (NoticeByDate.length === 0) {\n            return res.status(404).json({ message: \"No Notice records found for this date range\" });\n        }\n        res.status(200).json(NoticeByDate);\n    } catch (error) {\n        console.error(\"Error fetching notice by date:\", error);\n        res.status(500).json({ message: \"Server error while fetching notices\" });\n    }\n};\n\nmodule.exports = {\n    getFullNotice,\n    getNoticeByDate\n};\n","size_bytes":1437},"backend/Controller/StudentAuthController.js":{"content":"const Student = require('../Models/Student');\nconst bcrypt = require('bcrypt');\nconst { generateToken } = require('../utlis/jwtHelpers');\n\n// STUDENT REGISTRATION\nexports.register = async (req, res) => {\n    const {\n        studentID,\n        firstName,\n        lastName,\n        fathersName,\n        mothersName,\n        Address,\n        grade,\n        email,\n        password\n    } = req.body;\n\n    try {\n        // Check if all required fields are provided\n        if (!studentID || !firstName || !fathersName || !mothersName || !Address || !grade || !email || !password) {\n            return res.status(400).json({\n                message: \"All required fields must be provided\",\n                required: [\"studentID\", \"firstName\", \"fathersName\", \"mothersName\", \"Address\", \"grade\", \"email\", \"password\"]\n            });\n        }\n\n        // Check if student already exists\n        const existingStudent = await Student.findOne({\n            $or: [\n                { studentID: studentID },\n                { email: email }\n            ]\n        });\n\n        if (existingStudent) {\n            if (existingStudent.studentID === studentID) {\n                return res.status(409).json({ message: \"Student ID already exists\" });\n            }\n            if (existingStudent.email === email) {\n                return res.status(409).json({ message: \"Email already registered\" });\n            }\n        }\n\n        // Hash the password before saving\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n        // Create new student with hashed password\n        const newStudent = new Student({\n            studentID,\n            firstName,\n            lastName: lastName || '',\n            fathersName,\n            mothersName,\n            Address,\n            grade,\n            email,\n            password: hashedPassword // Save the hashed password\n        });\n\n        // Save the student to database\n        await newStudent.save();\n\n        // Generate JWT token for immediate login after registration\n        const token = generateToken({\n            studentId: newStudent._id,\n            studentID: newStudent.studentID\n        });\n\n        res.status(201).json({\n            message: \"Registration successful\",\n            studentID: newStudent.studentID,\n            token: token,\n            expiresIn: '24h'\n        });\n\n    } catch (err) {\n        console.error(\"Registration Error:\", err);\n        \n        // Handle specific MongoDB errors\n        if (err.code === 11000) {\n            const field = Object.keys(err.keyPattern)[0];\n            return res.status(409).json({\n                message: `${field} already exists`\n            });\n        }\n        \n        res.status(500).json({ message: \"Server error during registration\" });\n    }\n};\n\n// ADMIN: Add student with hashed password\nexports.addStudent = async (req, res) => {\n    const {\n        studentID,\n        firstName,\n        lastName,\n        fathersName,\n        mothersName,\n        Address,\n        grade,\n        email,\n        password\n    } = req.body;\n\n    try {\n        // Check if all required fields are provided\n        if (!studentID || !firstName || !fathersName || !mothersName || !Address || !grade || !email || !password) {\n            return res.status(400).json({\n                message: \"All required fields must be provided\",\n                required: [\"studentID\", \"firstName\", \"fathersName\", \"mothersName\", \"Address\", \"grade\", \"email\", \"password\"]\n            });\n        }\n\n        // Check if student already exists\n        const existingStudent = await Student.findOne({\n            $or: [\n                { studentID: studentID },\n                { email: email }\n            ]\n        });\n\n        if (existingStudent) {\n            if (existingStudent.studentID === studentID) {\n                return res.status(409).json({ message: \"Student ID already exists\" });\n            }\n            if (existingStudent.email === email) {\n                return res.status(409).json({ message: \"Email already registered\" });\n            }\n        }\n\n        // Hash the password before saving\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n        // Create new student with hashed password\n        const newStudent = new Student({\n            studentID,\n            firstName,\n            lastName: lastName || '',\n            fathersName,\n            mothersName,\n            Address,\n            grade,\n            email,\n            password: hashedPassword // Save the hashed password\n        });\n\n        // Save the student to database\n        await newStudent.save();\n\n        res.status(201).json({\n            message: \"Student added successfully\",\n            student: {\n                studentID: newStudent.studentID,\n                firstName: newStudent.firstName,\n                lastName: newStudent.lastName,\n                email: newStudent.email,\n                grade: newStudent.grade\n            }\n        });\n\n    } catch (err) {\n        console.error(\"Add Student Error:\", err);\n        \n        // Handle specific MongoDB errors\n        if (err.code === 11000) {\n            const field = Object.keys(err.keyPattern)[0];\n            return res.status(409).json({\n                message: `${field} already exists`\n            });\n        }\n        \n        res.status(500).json({ message: \"Server error while adding student\" });\n    }\n};\n\n// ADMIN: Update student password with hashing\nexports.updateStudentPassword = async (req, res) => {\n    const { studentID, newPassword } = req.body;\n\n    if (!studentID || !newPassword) {\n        return res.status(400).json({ message: \"Student ID and new password are required\" });\n    }\n\n    try {\n        // Find the student\n        const student = await Student.findOne({ studentID });\n\n        if (!student) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n\n        // Hash the new password\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n\n        // Update the password\n        student.password = hashedPassword;\n        await student.save();\n\n        res.status(200).json({\n            message: \"Password updated successfully\",\n            studentID: student.studentID\n        });\n\n    } catch (err) {\n        console.error(\"Update Password Error:\", err);\n        res.status(500).json({ message: \"Server error while updating password\" });\n    }\n};\n\nexports.login = async (req, res) => {\n    const { studentID, password } = req.body;\n\n    if (!studentID || !password) {\n        return res.status(400).json({ message: \"Student ID and Password are required\" });\n    }\n    \n    try {\n        // Finding the student\n        const studentData = await Student.findOne({ studentID });\n\n        if (!studentData) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n\n        // Comparing the password\n        const isMatch = await bcrypt.compare(password, studentData.password);\n\n        if (!isMatch) {\n            return res.status(400).json({ message: \"Invalid credentials\" });\n        }\n\n        // Update last login time (removed sessionExpiry as it's not needed with JWT)\n        await Student.findByIdAndUpdate(studentData._id, {\n            lastLoginAt: new Date()\n        });\n\n        // Generate JWT token\n        const token = generateToken({\n            studentId: studentData._id,\n            studentID: studentData.studentID\n        });\n\n        // Send response with token\n        res.status(200).json({\n            message: `Welcome ${studentData.firstName} ${studentData.lastName || ''}`.trim(),\n            studentID: studentData.studentID,\n            token: token,\n            expiresIn: '24h'\n        });\n\n    } catch (err) {\n        console.error(\"Login Error:\", err);\n        res.status(500).json({ message: \"Server error during login\" });\n    }\n};\n\n// STUDENT LOGOUT\n// With JWT, logout is handled on the client side by removing the token\n// However, we can still provide an endpoint for consistency\nexports.logout = async (req, res) => {\n    try {\n        // With JWT, we don't need to do anything server-side\n        // The client should remove the token from storage\n        \n        // Optional: You could maintain a token blacklist here if needed\n        // For now, we'll just send a success response\n        \n        res.status(200).json({ \n            message: \"Logged out successfully. Please remove the token from your client storage.\" \n        });\n    } catch (err) {\n        console.error(\"Logout Error:\", err);\n        res.status(500).json({ message: \"Server error during logout\" });\n    }\n};\n","size_bytes":8739},"backend/Controller/TimetableController.js":{"content":"\nconst Timetable = require('../Models/Timetable');\n\n// GET FULL TIMETABLE\nconst getFullTimetable = async (req, res) => {\n    const classId = req.params.id;\n    try {\n        const fullTimetable = await Timetable.find({\n            classId: new RegExp(`^${classId}$`, \"i\")\n        });\n        if (fullTimetable.length === 0) {\n            return res.status(404).json({ message: \"The timetable was not found\" });\n        }\n        res.status(200).json(fullTimetable);\n    } catch (error) {\n        console.error(\"Error fetching timetable:\", error);\n        res.status(500).json({ message: \"Server error while fetching timetable\" });\n    }\n};\n\nmodule.exports = {\n    getFullTimetable\n};\n","size_bytes":684},"backend/Controller/wroking_sda.js":{"content":"const Student = require('../Models/Student');\nconst bcrypt = require('bcrypt');\nconst { generateToken } = require('../utlis/jwtHelpers');\n\n// STUDENT REGISTRATION\nexports.register = async (req, res) => {\n    const {\n        studentID,\n        firstName,\n        lastName,\n        fathersName,\n        mothersName,\n        Address,\n        grade,\n        email,\n        password\n    } = req.body;\n\n    try {\n        // Check if all required fields are provided\n        if (!studentID || !firstName || !fathersName || !mothersName || !Address || !grade || !email || !password) {\n            return res.status(400).json({\n                message: \"All required fields must be provided\",\n                required: [\"studentID\", \"firstName\", \"fathersName\", \"mothersName\", \"Address\", \"grade\", \"email\", \"password\"]\n            });\n        }\n\n        // Check if student already exists\n        const existingStudent = await Student.findOne({\n            $or: [\n                { studentID: studentID },\n                { email: email }\n            ]\n        });\n\n        if (existingStudent) {\n            if (existingStudent.studentID === studentID) {\n                return res.status(409).json({ message: \"Student ID already exists\" });\n            }\n            if (existingStudent.email === email) {\n                return res.status(409).json({ message: \"Email already registered\" });\n            }\n        }\n\n        // Hash the password before saving\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n        // Create new student with hashed password\n        const newStudent = new Student({\n            studentID,\n            firstName,\n            lastName: lastName || '',\n            fathersName,\n            mothersName,\n            Address,\n            grade,\n            email,\n            password: hashedPassword // Save the hashed password\n        });\n\n        // Save the student to database\n        await newStudent.save();\n\n        // Generate JWT token for immediate login after registration\n        const token = generateToken({\n            studentId: newStudent._id,\n            studentID: newStudent.studentID\n        });\n\n        res.status(201).json({\n            message: \"Registration successful\",\n            studentID: newStudent.studentID,\n            token: token,\n            expiresIn: '24h'\n        });\n\n    } catch (err) {\n        console.error(\"Registration Error:\", err);\n        \n        // Handle specific MongoDB errors\n        if (err.code === 11000) {\n            const field = Object.keys(err.keyPattern)[0];\n            return res.status(409).json({\n                message: `${field} already exists`\n            });\n        }\n        \n        res.status(500).json({ message: \"Server error during registration\" });\n    }\n};\n\n// ADMIN: Add student with hashed password\nexports.addStudent = async (req, res) => {\n    const {\n        studentID,\n        firstName,\n        lastName,\n        fathersName,\n        mothersName,\n        Address,\n        grade,\n        email,\n        password\n    } = req.body;\n\n    try {\n        // Check if all required fields are provided\n        if (!studentID || !firstName || !fathersName || !mothersName || !Address || !grade || !email || !password) {\n            return res.status(400).json({\n                message: \"All required fields must be provided\",\n                required: [\"studentID\", \"firstName\", \"fathersName\", \"mothersName\", \"Address\", \"grade\", \"email\", \"password\"]\n            });\n        }\n\n        // Check if student already exists\n        const existingStudent = await Student.findOne({\n            $or: [\n                { studentID: studentID },\n                { email: email }\n            ]\n        });\n\n        if (existingStudent) {\n            if (existingStudent.studentID === studentID) {\n                return res.status(409).json({ message: \"Student ID already exists\" });\n            }\n            if (existingStudent.email === email) {\n                return res.status(409).json({ message: \"Email already registered\" });\n            }\n        }\n\n        // Hash the password before saving\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n        // Create new student with hashed password\n        const newStudent = new Student({\n            studentID,\n            firstName,\n            lastName: lastName || '',\n            fathersName,\n            mothersName,\n            Address,\n            grade,\n            email,\n            password: hashedPassword // Save the hashed password\n        });\n\n        // Save the student to database\n        await newStudent.save();\n\n        res.status(201).json({\n            message: \"Student added successfully\",\n            student: {\n                studentID: newStudent.studentID,\n                firstName: newStudent.firstName,\n                lastName: newStudent.lastName,\n                email: newStudent.email,\n                grade: newStudent.grade\n            }\n        });\n\n    } catch (err) {\n        console.error(\"Add Student Error:\", err);\n        \n        // Handle specific MongoDB errors\n        if (err.code === 11000) {\n            const field = Object.keys(err.keyPattern)[0];\n            return res.status(409).json({\n                message: `${field} already exists`\n            });\n        }\n        \n        res.status(500).json({ message: \"Server error while adding student\" });\n    }\n};\n\n// ADMIN: Update student password with hashing\nexports.updateStudentPassword = async (req, res) => {\n    const { studentID, newPassword } = req.body;\n\n    if (!studentID || !newPassword) {\n        return res.status(400).json({ message: \"Student ID and new password are required\" });\n    }\n\n    try {\n        // Find the student\n        const student = await Student.findOne({ studentID });\n\n        if (!student) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n\n        // Hash the new password\n        const saltRounds = 10;\n        const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n\n        // Update the password\n        student.password = hashedPassword;\n        await student.save();\n\n        res.status(200).json({\n            message: \"Password updated successfully\",\n            studentID: student.studentID\n        });\n\n    } catch (err) {\n        console.error(\"Update Password Error:\", err);\n        res.status(500).json({ message: \"Server error while updating password\" });\n    }\n};\n\nexports.login = async (req, res) => {\n    const { studentID, password } = req.body;\n\n    if (!studentID || !password) {\n        return res.status(400).json({ message: \"Student ID and Password are required\" });\n    }\n    \n    try {\n        // Finding the student\n        const studentData = await Student.findOne({ studentID });\n\n        if (!studentData) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n\n        // Comparing the password\n        const isMatch = await bcrypt.compare(password, studentData.password);\n\n        if (!isMatch) {\n            return res.status(400).json({ message: \"Invalid credentials\" });\n        }\n\n        // Update last login time (removed sessionExpiry as it's not needed with JWT)\n        await Student.findByIdAndUpdate(studentData._id, {\n            lastLoginAt: new Date()\n        });\n\n        // Generate JWT token\n        const token = generateToken({\n            studentId: studentData._id,\n            studentID: studentData.studentID\n        });\n\n        // Send response with token\n        res.status(200).json({\n            message: `Welcome ${studentData.firstName} ${studentData.lastName || ''}`.trim(),\n            studentID: studentData.studentID,\n            token: token,\n            expiresIn: '24h'\n        });\n\n    } catch (err) {\n        console.error(\"Login Error:\", err);\n        res.status(500).json({ message: \"Server error during login\" });\n    }\n};\n\n// STUDENT LOGOUT\n// With JWT, logout is handled on the client side by removing the token\n// However, we can still provide an endpoint for consistency\nexports.logout = async (req, res) => {\n    try {\n        // With JWT, we don't need to do anything server-side\n        // The client should remove the token from storage\n        \n        // Optional: You could maintain a token blacklist here if needed\n        // For now, we'll just send a success response\n        \n        res.status(200).json({ \n            message: \"Logged out successfully. Please remove the token from your client storage.\" \n        });\n    } catch (err) {\n        console.error(\"Logout Error:\", err);\n        res.status(500).json({ message: \"Server error during logout\" });\n    }\n};\n","size_bytes":8739},"backend/Middleware/AdminAuth.js":{"content":"const Admin = require('../Models/Admin');\n\n// Middleware to check if admin is authenticated using cookies\nexports.requireAuth = async (req, res, next) => {\n    try {\n        const adminToken = req.cookies.admin_token;\n\n        if (!adminToken) {\n            return res.status(401).json({\n                message: \"Access denied. No admin token provided.\"\n            });\n        }\n\n        const admin = await Admin.findById(adminToken);\n\n        if (!admin) {\n            return res.status(401).json({\n                message: \"Invalid admin token. Admin not found.\"\n            });\n        }\n\n        // Check if session is expired\n        if (admin.sessionExpiry && admin.sessionExpiry < new Date()) {\n            return res.status(401).json({\n                message: \"Admin session expired. Please log in again.\"\n            });\n        }\n\n        // Add admin info to request object\n        req.admin = admin;\n        req.adminID = admin._id;\n\n        next();\n\n    } catch (error) {\n        console.error(\"Admin auth middleware error:\", error);\n        return res.status(500).json({\n            message: \"Server error during admin authentication\"\n        });\n    }\n};\n\n// Middleware to check if admin is already logged in (for login routes)\nexports.requireGuest = async (req, res, next) => {\n    try {\n        const adminToken = req.cookies.admin_token;\n\n        if (!adminToken) {\n            return next(); // No token, user is a guest\n        }\n\n        const admin = await Admin.findById(adminToken);\n\n        if (admin && admin.sessionExpiry && admin.sessionExpiry > new Date()) {\n            return res.status(400).json({\n                message: \"Admin is already logged in\"\n            });\n        }\n\n        next();\n\n    } catch (error) {\n        console.error(\"Admin guest middleware error:\", error);\n        next(); // Allow to continue as guest on error\n    }\n};","size_bytes":1880},"backend/Middleware/TeacherAuth.js":{"content":"const Teacher = require('../Models/Teacher');\nconst { verifyToken, extractTokenFromHeader } = require('../utlis/jwtHelpers');\n\n// Middleware to check if teacher is authenticated using JWT\nexports.requireAuth = async (req, res, next) => {\n    try {\n        const authHeader = req.headers.authorization;\n        const token = extractTokenFromHeader(authHeader);\n\n        if (!token) {\n            return res.status(401).json({\n                message: \"Access denied. No teacher token provided.\"\n            });\n        }\n\n        // Verify the token\n        const decoded = verifyToken(token);\n\n        if (!decoded || decoded.role !== 'teacher') {\n            return res.status(401).json({\n                message: \"Invalid teacher token.\"\n            });\n        }\n\n        // Find the teacher\n        const teacher = await Teacher.findOne({ teacherID: decoded.teacherID });\n\n        if (!teacher) {\n            return res.status(401).json({\n                message: \"Teacher not found.\"\n            });\n        }\n\n        // Add teacher info to request object\n        req.teacher = teacher;\n        req.teacherID = teacher.teacherID;\n\n        next();\n\n    } catch (error) {\n        console.error(\"Teacher auth middleware error:\", error);\n        if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {\n            return res.status(401).json({\n                message: \"Invalid or expired teacher token.\"\n            });\n        }\n        return res.status(500).json({\n            message: \"Server error during teacher authentication\"\n        });\n    }\n};\n\n// Middleware to ensure user is NOT authenticated (for login routes)\nexports.requireGuest = (req, res, next) => {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n        return res.status(400).json({\n            message: \"Already authenticated. Please logout first.\"\n        });\n    }\n\n    next();\n};","size_bytes":1944},"backend/Middleware/Validation.js":{"content":"exports.validateAdminLogin = async (req, res, next) => {\n    try {\n        const { adminID, password } = req.body;\n\n        // Check if required fields are present\n        if (!adminID || !password) {\n            return res.status(400).json({\n                message: \"Admin ID and password are required\"\n            });\n        }\n\n        // Check if fields are not empty strings\n        if (adminID.trim() === '' || password.trim() === '') {\n            return res.status(400).json({\n                message: \"Admin ID and password cannot be empty\"\n            });\n        }\n\n        next();\n\n    } catch (error) {\n        console.error(\"Admin validation middleware error:\", error);\n        return res.status(500).json({\n            message: \"Server error during admin validation\"\n        });\n    }\n};","size_bytes":803},"backend/Middleware/auth.js":{"content":"const Student = require('../Models/Student');\nconst { verifyToken, extractTokenFromHeader } = require('../utlis/jwtHelpers');\n\n// Middleware to check if student is authenticated using JWT\nexports.requireAuth = async (req, res, next) => {\n    try {\n        // Get the Authorization header\n        const authHeader = req.headers.authorization;\n        \n        // Extract token from header\n        const token = extractTokenFromHeader(authHeader);\n\n        // Check if token exists\n        if (!token) {\n            return res.status(401).json({\n                message: \"Access denied. No token provided.\"\n            });\n        }\n\n        // Verify the token\n        let decoded;\n        try {\n            decoded = verifyToken(token);\n        } catch (error) {\n            if (error.name === 'TokenExpiredError') {\n                return res.status(401).json({\n                    message: \"Token expired. Please log in again.\"\n                });\n            } else if (error.name === 'JsonWebTokenError') {\n                return res.status(401).json({\n                    message: \"Invalid token. Please log in again.\"\n                });\n            }\n            throw error;\n        }\n\n        // Find student in database using the decoded studentId\n        const student = await Student.findById(decoded.studentId);\n\n        // Check if student exists\n        if (!student) {\n            return res.status(401).json({\n                message: \"Invalid token. Student not found.\"\n            });\n        }\n\n        // Add student info to request object for use in other routes\n        req.student = student;\n        req.studentId = student._id;\n\n        // Continue to next middleware or route handler\n        next();\n\n    } catch (error) {\n        console.error(\"Auth middleware error:\", error);\n        return res.status(500).json({\n            message: \"Server error during authentication\"\n        });\n    }\n};\n\n// Middleware to check if student is already logged in (for login/register routes)\n// With JWT, we just check if a valid token is provided\nexports.requireGuest = async (req, res, next) => {\n    try {\n        // Get the Authorization header\n        const authHeader = req.headers.authorization;\n        \n        // Extract token from header\n        const token = extractTokenFromHeader(authHeader);\n\n        // If no token, user is a guest - continue\n        if (!token) {\n            return next();\n        }\n\n        // Try to verify the token\n        try {\n            const decoded = verifyToken(token);\n            \n            // Check if student exists\n            const student = await Student.findById(decoded.studentId);\n            \n            if (student) {\n                // Valid token and student exists - they're already logged in\n                return res.status(400).json({\n                    message: \"You are already logged in\"\n                });\n            }\n        } catch (error) {\n            // Token is invalid or expired - treat as guest\n            console.log(\"Invalid token in requireGuest:\", error.message);\n        }\n\n        // Continue to next middleware (login/register)\n        next();\n\n    } catch (error) {\n        console.error(\"Guest middleware error:\", error);\n        // In case of error, allow to continue as guest\n        next();\n    }\n};","size_bytes":3311},"backend/Middleware/validation.js":{"content":"exports.validateLogin = async (req, res, next) => {\n    try {\n        const { studentID, password } = req.body;\n\n        // Check if required fields are present\n        if (!studentID || !password) {\n            return res.status(400).json({\n                message: \"Student ID and password are required\"\n            });\n        }\n\n        // Check if fields are not empty strings\n        if (studentID.trim() === '' || password.trim() === '') {\n            return res.status(400).json({\n                message: \"Student ID and password cannot be empty\"\n            });\n        }\n\n        next();\n\n    } catch (error) {\n        console.error(\"Validation middleware error:\", error);\n        return res.status(500).json({\n            message: \"Server error during validation\"\n        });\n    }\n};\n\nexports.validateTeacherLogin = async (req, res, next) => {\n    try {\n        const { teacherID, password } = req.body;\n\n        // Check if required fields are present\n        if (!teacherID || !password) {\n            return res.status(400).json({\n                message: \"Teacher ID and password are required\"\n            });\n        }\n\n        // Check if fields are not empty strings\n        if (teacherID.trim() === '' || password.trim() === '') {\n            return res.status(400).json({\n                message: \"Teacher ID and password cannot be empty\"\n            });\n        }\n\n        next();\n\n    } catch (error) {\n        console.error(\"Teacher validation middleware error:\", error);\n        return res.status(500).json({\n            message: \"Server error during teacher validation\"\n        });\n    }\n};","size_bytes":1617},"backend/Models/Admin.js":{"content":"const mongoose = require('mongoose');\n\n// Schema of Admin\nconst adminSchema = new mongoose.Schema({\n    adminID: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    firstName: {\n        type: String,\n        required: true\n    },\n    lastName: {\n        type: String\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    sessionExpiry: {\n        type: Date,\n        default: null\n    },\n    lastLoginAt: {\n        type: Date,\n        default: Date.now\n    }\n});\n\n// Safe Mode\nconst Admin = mongoose.models.Admin || mongoose.model('Admin', adminSchema);\nmodule.exports = Admin;\n","size_bytes":717},"backend/Models/Attendance.js":{"content":"\nconst mongoose = require('mongoose');\n//Schema of Attendance\nconst attendanceSchema = new mongoose.Schema({\n\n    date: {\n        type: Date,\n        required: true,\n    },\n    studentID: {\n        type: String,\n        required: true,\n    },\n    status:{\n        type: String,\n        enum: [\"Present\", \"Absent\"],\n        required: true\n    }\n\n});\n\n// Safe Mode: Prevent OverwriteModelError\nconst Attendance = mongoose.models.Attendance || mongoose.model('Attendance', attendanceSchema);\nmodule.exports = Attendance; //export Attendance\n","size_bytes":538},"backend/Models/Calendar.js":{"content":"\nconst mongoose = require('mongoose');\n// Schema of Calender\nconst calendarSchema = new mongoose.Schema({\n    studentID: {\n        type: String,\n        required: true\n    },\n    title: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    description: {\n        type: String,\n        default: '',\n        trim: true\n    },\n    date: {\n        type: Date,\n        required: true\n    },\n    category: {\n        type: String,\n        enum: ['Holiday', 'Exam', 'Event', 'Reminder', 'Other'], // you can customize this\n        default: 'Other'\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    }\n});\n\n// Safe Mode\nconst Calendar = mongoose.models.Calendar || mongoose.model('Calendar', calendarSchema);\nmodule.exports = Calendar;\n","size_bytes":774},"backend/Models/Homework.js":{"content":"const mongoose = require('mongoose');\n\n// Schema of homework\nconst homeworkSchema = new mongoose.Schema({\n    studentID:{\n        type: String,\n        required:true\n    },\n    title: {\n        type: String,\n        required: true,\n    },\n    description: {\n        type: String,\n        required: true,\n    },\n    assignDate: {\n        type: Date,\n        required: true\n    },\n    dueDate: {\n        type: Date,\n        required: true,\n    },\n    date: {  // ADD THIS FIELD\n        type: Date,\n        required: true\n    }\n}, {\n    timestamps: true\n});\n\n// Safe Mode\nconst Homework = mongoose.models.Homework || mongoose.model('Homework', homeworkSchema);\nmodule.exports = Homework;","size_bytes":684},"backend/Models/Marks.js":{"content":"\nconst mongoose = require('mongoose');\n//Schema of Marks\nconst markSchema = new mongoose.Schema({\n    studentID: {\n        type: String,\n        required: true\n    },\n    subject: {\n        type: String,\n        required: true\n    },\n    marksObtained: {\n        type: Number,\n        required: true\n    },\n    totalMarks: {\n        type: Number,\n\n    },\n    examType: {\n        type: String,\n        enum: ['Midterm', 'Final', 'Class Test',],\n        required: true\n    },\n    semester: {\n        type: String,\n        required: true\n    },\n    date: {\n        type: Date,\n        default: Date.now\n    },\n});\n\n// Safe Mode\nconst Marks = mongoose.models.Marks || mongoose.model('Marks', markSchema);\nmodule.exports = Marks;","size_bytes":724},"backend/Models/Notice.js":{"content":"\nconst mongoose = require('mongoose');\n\n//this is schema of notice\nconst noticeSchema = new mongoose.Schema({\n    studentID:{\n        type: String,\n        required: true,\n    },\n    title: {\n        type: String,\n        required: true,\n    },\n    description: {\n        type: String,\n        required: true,\n    },\n    date: {\n        type: Date,\n        required: true,\n    },\n});\n\n\n// Safe Mode\nconst Notice = mongoose.models.Notice || mongoose.model('Notice', noticeSchema);\nmodule.exports = Notice;","size_bytes":504},"backend/Models/Student.js":{"content":"const mongoose = require('mongoose');\n//Schema of Student\nconst studentSchema = new mongoose.Schema({\n    studentID: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    firstName: {\n        type: String,\n        required: true,\n    },\n    lastName: {\n        type: String,\n    },\n    fathersName: {\n        type: String,\n        required: true,\n    },\n    mothersName: {\n        type: String,\n        required: true,\n    },\n    Address: {\n        type: String,\n        required: true,\n    },\n    grade: {\n        type: Number,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    lastLoginAt: {\n        type: Date,\n        default: Date.now\n    }\n});\n\n\n// Safe Mode: Prevent OverwriteModelError\nconst Student = mongoose.models.Student || mongoose.model('Student', studentSchema);\nmodule.exports = Student;","size_bytes":970},"backend/Models/Teacher.js":{"content":"const mongoose = require('mongoose');\n\n// Schema of Teacher\nconst teacherSchema = new mongoose.Schema({\n    teacherID: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    firstName: {\n        type: String,\n        required: true\n    },\n    lastName: {\n        type: String\n    },\n    Address: {\n        type: String,\n        required: true\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    sessionExpiry: {\n        type: Date,\n        default: null\n    },\n    lastLoginAt: {\n        type: Date,\n        default: Date.now\n    }\n}, {\n    timestamps: true\n});\n\n// Safe Mode\nconst Teacher = mongoose.models.Teacher || mongoose.model('Teacher', teacherSchema);\nmodule.exports = Teacher;","size_bytes":825},"backend/Models/Timetable.js":{"content":"\nconst mongoose = require('mongoose');\n//Schema of period\nconst  periodSchema = new mongoose.Schema({\n\n    subject: {\n        type: String,\n        required: true\n    },\n    // teacher: {\n    //     type: String  // or ObjectId if you have a Teacher collection\n    // },\n    startTime: {\n        type: String, // e.g., \"09:00\"\n        required: true\n    },\n    endTime: {\n        type: String, // e.g., \"10:00\"\n        required: true\n    },\n    // room: {\n    //     type: String\n    // }\n});\n\nconst daySchema = new mongoose.Schema({\n    day: {\n        type: String,\n        enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        required: true\n    },\n    periods: [periodSchema]\n});\n\nconst timetableSchema = new mongoose.Schema({\n    classId: {\n        type: String, // or ObjectId if you have Class collection\n        required: true\n    },\n    timetable: [daySchema]\n});\n\n// Safe Mode\nconst Timetable = mongoose.models.Timetable || mongoose.model('Timetable', timetableSchema);\nmodule.exports = Timetable;","size_bytes":1036},"backend/Routes/Attendance.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../Middleware/auth');\n\n// Import controller functions\nconst {\n    getAllAttendance,\n    getAttendanceByDate,\n    AttendanceSummary,\n    AttendanceByRange\n} = require('../Controller/AttendanceController');\n\n// Routes\n\n\n// ✅ Get attendance by date\nrouter.get(\"/:id/date/:date\",auth.requireAuth,getAttendanceByDate);\n\n// ✅ Get attendance summary\nrouter.get(\"/:id/summary\",auth.requireAuth,  AttendanceSummary);\n\n// ✅ Get attendance in date range\nrouter.get(\"/:id/range\",auth.requireAuth,AttendanceByRange);\n\n// ✅ Get all attendance\nrouter.get(\"/:id\",auth.requireAuth,getAllAttendance);\n\n\n\nmodule.exports = router;\n","size_bytes":710},"backend/Routes/Calendar.js":{"content":"const express = require(`express`);\nconst router = express.Router();\nconst auth = require('../Middleware/auth');\n\nconst{\n    getAllCalendarEvents,\n    getCalendarByDate,\n    getCalendarByRange,\n}=require('../Controller/CalendarController')\n\n//ROUTES\n\nrouter.get(\"/\",auth.requireAuth,getAllCalendarEvents);\nrouter.get(\"/date/:date\",auth.requireAuth,getCalendarByDate);\nrouter.get(\"/date/range\",auth.requireAuth,getCalendarByRange);\n\nmodule.exports = router;\n","size_bytes":457},"backend/Routes/Homework.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../Middleware/auth');\n// Import controller functions\nconst {\n    getAllHomework,\n    getHomeworkByDate,\n    getHomeworkByRange\n} = require('../Controller/HomeworkController');\n\n// Routes\nrouter.get(\"/:id\",auth.requireAuth, getAllHomework);\nrouter.get(\"/:id/date/:date\",auth.requireAuth, getHomeworkByDate);\nrouter.get(\"/:id/range\",auth.requireAuth, getHomeworkByRange);\n\nmodule.exports = router","size_bytes":485},"backend/Routes/Marks.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../Middleware/auth');\n\n// Import controller functions\nconst {\n    getAllSemesterMarks,\n     getMarksByExamType\n} = require('../Controller/MarksController');\n\n// Routes\nrouter.get(\"/:id\",auth.requireAuth, getAllSemesterMarks);\nrouter.get(\"/:id/semester/:semester\",auth.requireAuth, getMarksByExamType);\n\nmodule.exports = router;\n","size_bytes":419},"backend/Routes/Notice.js":{"content":"\nconst express = require(`express`);\nconst router = express.Router();\nconst auth = require('../Middleware/auth');\n\nconst{\n    getFullNotice,\n    getNoticeByDate\n}= require('../Controller/NoticeController')\n\n//ROUTES\nrouter.get(\"/:id\",auth.requireAuth, getFullNotice);\nrouter.get(\"/:id/range\",auth.requireAuth, getNoticeByDate);\nmodule.exports = router","size_bytes":351},"backend/Routes/StudentAuth.js":{"content":"\n// FIXED STUDENT AUTH ROUTES\nconst express = require('express');\nconst router = express.Router();\nconst validation = require('../Middleware/validation');\nconst studentAuthController = require('../Controller/StudentAuthController');\nconst auth = require('../Middleware/auth');\n\n// REGISTRATION ROUTE\nrouter.post('/register',\n    auth.requireGuest,\n    studentAuthController.register\n);\n\n// LOGIN ROUTE\nrouter.post('/login',\n    validation.validateLogin,\n    auth.requireGuest,\n    studentAuthController.login\n);\n\n// LOGOUT ROUTE\nrouter.post('/logout', auth.requireAuth, studentAuthController.logout);\n\n// ADMIN ROUTES (You should add proper admin authentication middleware)\n// For now, these are protected with basic auth\nrouter.post('/admin/add-student',\n    auth.requireAuth, // You should replace this with admin-specific auth\n    studentAuthController.addStudent\n);\n\nrouter.post('/admin/update-password',\n    auth.requireAuth, // You should replace this with admin-specific auth\n    studentAuthController.updateStudentPassword\n);\n\n// PROTECTED ROUTES\nrouter.get('/profile', auth.requireAuth, (req, res) => {\n    res.json({\n        message: \"Your profile page\",\n        student: req.student,\n        studentId: req.studentId\n    });\n});\n\nrouter.get('/dashboard', auth.requireAuth, (req, res) => {\n    res.json({\n        message: `Welcome to dashboard, ${req.student.firstName} ${req.student.lastName || ''}!`.trim(),\n        studentId: req.studentId\n    });\n});\n\nmodule.exports = router;","size_bytes":1490},"backend/Routes/Timetable.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../Middleware/auth');\n\nconst{\n    getFullTimetable,\n}=require('../Controller/TimetableController')\n\n//ROUTES\n\nrouter.get(\"/:id\",auth.requireAuth,getFullTimetable);\n\n\nmodule.exports = router","size_bytes":280},"backend/config/database.js":{"content":"const mongoose = require('mongoose');\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGO_URL);\n        console.log('✅ MongoDB connected successfully');\n    } catch (err) {\n        console.error('❌ MongoDB connection failed:', err.message);\n        console.log('🔄 Server will continue without database connection');\n        // Don't exit - let server start without DB for now\n        return false;\n    }\n    return true;\n};\nmodule.exports = connectDB;\n","size_bytes":499},"backend/scripts/hashExistingPasswords.js":{"content":"/**\n * Utility script to hash existing plain text passwords in the database\n * Run this script once to convert all plain text passwords to hashed passwords\n * Usage: node scripts/hashExistingPasswords.js\n */\n\nrequire('dotenv').config({ path: '../.env' });\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst Student = require('../Models/Student');\n\n// Connect to MongoDB\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/studentDB', {\n            useNewUrlParser: true,\n            useUnifiedTopology: true\n        });\n        console.log('✅ Connected to MongoDB');\n    } catch (error) {\n        console.error('❌ MongoDB connection error:', error);\n        process.exit(1);\n    }\n};\n\n// Function to check if a password is already hashed\nconst isPasswordHashed = (password) => {\n    // bcrypt hashes always start with $2a$, $2b$, or $2y$\n    return password && (password.startsWith('$2a$') || password.startsWith('$2b$') || password.startsWith('$2y$'));\n};\n\n// Main function to hash passwords\nconst hashExistingPasswords = async () => {\n    try {\n        console.log('🔄 Starting password hashing process...');\n        \n        // Find all students\n        const students = await Student.find({});\n        console.log(`📊 Found ${students.length} students in database`);\n        \n        let hashedCount = 0;\n        let alreadyHashedCount = 0;\n        let errorCount = 0;\n        \n        for (const student of students) {\n            try {\n                // Check if password is already hashed\n                if (isPasswordHashed(student.password)) {\n                    alreadyHashedCount++;\n                    console.log(`⏭️  Student ${student.studentID}: Password already hashed`);\n                    continue;\n                }\n                \n                // Hash the plain text password\n                const saltRounds = 10;\n                const hashedPassword = await bcrypt.hash(student.password, saltRounds);\n                \n                // Update the student's password\n                student.password = hashedPassword;\n                await student.save();\n                \n                hashedCount++;\n                console.log(`✅ Student ${student.studentID}: Password hashed successfully`);\n                \n            } catch (error) {\n                errorCount++;\n                console.error(`❌ Error hashing password for student ${student.studentID}:`, error.message);\n            }\n        }\n        \n        // Print summary\n        console.log('\\n📊 Password Hashing Summary:');\n        console.log(`✅ Successfully hashed: ${hashedCount} passwords`);\n        console.log(`⏭️  Already hashed: ${alreadyHashedCount} passwords`);\n        console.log(`❌ Errors: ${errorCount}`);\n        console.log(`📊 Total students processed: ${students.length}`);\n        \n    } catch (error) {\n        console.error('❌ Error in hashing process:', error);\n    } finally {\n        // Close database connection\n        await mongoose.connection.close();\n        console.log('\\n✅ Database connection closed');\n        process.exit(0);\n    }\n};\n\n// Run the script\nconst run = async () => {\n    console.log('🚀 Password Hashing Utility Script');\n    console.log('===================================\\n');\n    \n    // Confirm before proceeding\n    console.log('⚠️  WARNING: This script will hash all plain text passwords in the database.');\n    console.log('⚠️  Make sure you have a backup of your database before proceeding.\\n');\n    \n    await connectDB();\n    await hashExistingPasswords();\n};\n\n// Execute\nrun().catch(error => {\n    console.error('❌ Script failed:', error);\n    process.exit(1);\n});","size_bytes":3770},"backend/utlis/dateHelpers.js":{"content":"","size_bytes":0},"backend/utlis/jwtHelpers.js":{"content":"const jwt = require('jsonwebtoken');\n\n// Get JWT secret from environment variable or use a default (should be in .env in production)\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h'; // 24 hours by default\n\n/**\n * Generate a JWT token for a student\n * @param {Object} payload - The data to encode in the token (e.g., studentId, studentID)\n * @returns {String} - The generated JWT token\n */\nconst generateToken = (payload) => {\n    return jwt.sign(payload, JWT_SECRET, {\n        expiresIn: JWT_EXPIRES_IN\n    });\n};\n\n/**\n * Verify and decode a JWT token\n * @param {String} token - The JWT token to verify\n * @returns {Object} - The decoded token payload\n * @throws {Error} - If token is invalid or expired\n */\nconst verifyToken = (token) => {\n    return jwt.verify(token, JWT_SECRET);\n};\n\n/**\n * Extract token from Authorization header\n * @param {String} authHeader - The Authorization header value\n * @returns {String|null} - The extracted token or null\n */\nconst extractTokenFromHeader = (authHeader) => {\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return null;\n    }\n    return authHeader.substring(7); // Remove 'Bearer ' prefix\n};\n\nmodule.exports = {\n    generateToken,\n    verifyToken,\n    extractTokenFromHeader,\n    JWT_EXPIRES_IN\n};","size_bytes":1375},"backend/utlis/responseHelpers.js":{"content":"","size_bytes":0},"backend/Controller/Admin/AdminAuthController.js":{"content":"\nconst Admin = require('../../Models/Admin');\nconst bcrypt = require('bcrypt');\n\n// 🔥 Login Admin\nexports.login = async (req, res) => {\n    const adminID = req.body.adminID || req.body.AdminID;\n    const password = req.body.password || req.body.Password;\n\n    // 🛑 Validation\n    if (!adminID || !password) {\n        return res.status(400).json({\n            message: \"Admin ID and password are required\",\n            received: { adminID: !!adminID, password: !!password }\n        });\n    }\n\n    try {\n        const admin = await Admin.findOne({ adminID });\n        if (!admin) {\n            return res.status(404).json({ message: \"Admin not found\" });\n        }\n\n        const isMatch = await bcrypt.compare(password, admin.password);\n        if (!isMatch) {\n            return res.status(400).json({ message: \"Invalid credentials\" });\n        }\n\n        const sessionExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000);\n        await Admin.findByIdAndUpdate(admin._id, { sessionExpiry, lastLoginAt: new Date() });\n\n        res.cookie('admin_token', admin._id, {\n            httpOnly: true,\n            maxAge: 24 * 60 * 60 * 1000,\n            secure: process.env.NODE_ENV === 'production',\n            sameSite: 'strict'\n        });\n\n        res.status(200).json({\n            message: `Welcome ${admin.firstName} ${admin.lastName || ''}`.trim(),\n            adminID: admin.adminID,\n            email: admin.email\n        });\n    } catch (err) {\n        console.error(\"Admin Login Error:\", err);\n        res.status(500).json({ message: \"Server error during login\" });\n    }\n};\n\n// 🔥 Logout Admin\nexports.logout = async (req, res) => {\n    try {\n        if (req.adminID) {\n            await Admin.findByIdAndUpdate(req.adminID, { sessionExpiry: null });\n        }\n        res.clearCookie('admin_token');\n        res.status(200).json({ message: \"Admin logged out successfully\" });\n    } catch (err) {\n        console.error(\"Admin Logout Error:\", err);\n        res.status(500).json({ message: \"Server error during logout\" });\n    }\n};\n\n","size_bytes":2044},"backend/Controller/Admin/CalendarController.js":{"content":"const Calendar = require('../../Models/Calendar');\n\n// ✅ Get all calendar events (sorted latest first)\nconst getAllCalendarEvents = async (req, res) => {\n    try {\n        const events = await Calendar.find({}).sort({ date: -1 });\n        res.status(200).json(events);\n    } catch (err) {\n        console.error(\"Error fetching calendar events:\", err);\n        res.status(500).json({ message: \"Server error while fetching calendar events\" });\n    }\n};\n\n// ✅ Create a new calendar event\nconst createCalendarEvent = async(req,res)=>{\n    const { title,description,date,category } = req.body;\n\n    // Validate required fields\n    if(!title || !date || !category){\n        return res.status(400).json({ message: \"Title, date, and category are required\" });\n    }\n    try{\n        const newEvent = new Calendar({\n            title,\n            description,\n            date,\n            category\n        })\n        await newEvent.save();\n        res.status(201).json({ message: \"Calendar event created successfully\", event: newEvent });\n    } catch (err) {\n        console.error(\"Error creating calendar event:\", err);\n        res.status(500).json({ message: \"Server error while creating calendar event\" });\n    }\n};\n// ✅ Update a calendar event by ID\nconst updateCalendarEvent = async (req, res) => {\n    const eventId = req.params.id;\n    const updates = req.body;\n\n    try {\n        const updatedEvent = await Calendar.findByIdAndUpdate(eventId, updates, { new: true });\n        if (!updatedEvent) {\n            return res.status(404).json({ message: \"Calendar event not found\" });\n        }\n        res.status(200).json({ message: \"Calendar event updated successfully\", event: updatedEvent });\n    } catch (err) {\n        console.error(\"Error updating calendar event:\", err);\n        res.status(500).json({ message: \"Server error while updating calendar event\" });\n    }\n};\n\n// ✅ Delete a calendar event by ID\nconst deleteCalendarEvent = async (req, res) => {\n    const eventId = req.params.id;\n\n    try {\n        const deletedEvent = await Calendar.findByIdAndDelete(eventId);\n        if (!deletedEvent) {\n            return res.status(404).json({ message: \"Calendar event not found\" });\n        }\n        res.status(200).json({ message: \"Calendar event deleted successfully\" });\n    } catch (err) {\n        console.error(\"Error deleting calendar event:\", err);\n        res.status(500).json({ message: \"Server error while deleting calendar event\" });\n    }\n};\n\nmodule.exports = {\n    getAllCalendarEvents,\n    createCalendarEvent,\n    updateCalendarEvent,\n    deleteCalendarEvent\n};","size_bytes":2589},"backend/Controller/Admin/StudentController.js":{"content":"// const Student = require('../../Models/Student');\n//\n// //get all students\n//\n// const getAllStudents = async (req,res)=>{\n//     try{\n//         const students = await students.find({});\n//         return res.status(200).json(students)\n//     }catch (err){\n//         console.error(\"Error fetching students data\",err);\n//         return res.status(500).json({message:\"Server error while fetching students\"});\n//     }\n// };\n// //Get single student by ID\n// const getStudentById = async(req,res)=>{\n//     const studentID = req.params.id;\n//     try{\n//         const student = await student.findOne({studentID});\n//         if(!student){\n//             return res.status(404).json({message:\"Student not found\"})\n//         }\n//         return res.status(200).json(student);\n//     }catch (err) {\n//         console.error(\"Error fetching student:\", err);\n//         res.status(500).json({ message: \"Server error while fetching student\" });\n//     }\n// };\n// //  Add a new student\n// const createStudent = async (req, res) => {\n//     const { studentID, firstName, lastName, fathersName, mothersName, Address, grade, section, email, password } = req.body;\n//\n//     // Check all required fields\n//     if (!studentID || !firstName || !fathersName || !mothersName || !Address || !grade || !email || !password) {\n//         return res.status(400).json({ message: \"All required fields must be filled\" });\n//     }\n//\n//     try {\n//         // Check if studentID or email already exists\n//         const existingStudent = await Student.findOne({ $or: [{ studentID }, { email }] });\n//         if (existingStudent) {\n//             return res.status(409).json({ message: \"Student ID or Email already exists\" });\n//         }\n//\n//         const newStudent = new Student({\n//             studentID,\n//             firstName,\n//             lastName,\n//             fathersName,\n//             mothersName,\n//             Address,\n//             grade,\n//             section,\n//             email,\n//             password, // Assume hashed if done at frontend; else hash here\n//         });\n//\n//         await newStudent.save();\n//         res.status(201).json({ message: \"Student created successfully\", student: newStudent });\n//     } catch (err) {\n//         console.error(\"Error creating student:\", err);\n//         res.status(500).json({ message: \"Server error while creating student\" });\n//     }\n// };\n//\n// //  Update a student\n// const updateStudent = async (req, res) => {\n//     const studentID = req.params.id;\n//     const updates = req.body;\n//\n//     try {\n//         const updatedStudent = await Student.findOneAndUpdate({ studentID }, updates, { new: true });\n//         if (!updatedStudent) {\n//             return res.status(404).json({ message: \"Student not found\" });\n//         }\n//         res.status(200).json({ message: \"Student updated successfully\", student: updatedStudent });\n//     } catch (err) {\n//         console.error(\"Error updating student:\", err);\n//         res.status(500).json({ message: \"Server error while updating student\" });\n//     }\n// };\n//\n// //  Delete a student\n// const deleteStudent = async (req, res) => {\n//     const studentID = req.params.id;\n//     try {\n//         const deletedStudent = await Student.findOneAndDelete({ studentID });\n//         if (!deletedStudent) {\n//             return res.status(404).json({ message: \"Student not found\" });\n//         }\n//         res.status(200).json({ message: \"Student deleted successfully\" });\n//     } catch (err) {\n//         console.error(\"Error deleting student:\", err);\n//         res.status(500).json({ message: \"Server error while deleting student\" });\n//     }\n// };\n//\n// module.exports = {\n//     getAllStudents,\n//     getStudentById,\n//     createStudent,\n//     updateStudent,\n//     deleteStudent\n// };\nconst Student = require('../../Models/Student');\nconst bcrypt = require('bcrypt');\n\n// 📝 ADD NEW STUDENT\nconst addStudent = async (req, res) => {\n    try {\n        const {\n            studentID,\n            firstName,\n            lastName,\n            fathersName,\n            mothersName,\n            Address,\n            grade,\n            email,\n            password,\n            section\n        } = req.body;\n\n        console.log(\"📥 Add Student Request Body:\", req.body);\n\n        // 🔥 Validate required fields\n        if (!studentID || !firstName || !fathersName || !mothersName || !Address || !grade || !email || !password || !section) {\n            return res.status(400).json({ message: \"All required fields must be filled\" });\n        }\n\n        // 🌟 Check for duplicate studentID or email\n        const existingStudent = await Student.findOne({\n            $or: [{ studentID }, { email }]\n        });\n\n        if (existingStudent) {\n            if (existingStudent.studentID === studentID) {\n                return res.status(400).json({ message: \"Student ID already exists\" });\n            }\n            if (existingStudent.email === email) {\n                return res.status(400).json({ message: \"Email already exists\" });\n            }\n        }\n\n        // 🔒 Hash password\n        const hashedPassword = await bcrypt.hash(password, 12);\n\n        // 📦 Create new student\n        const newStudent = new Student({\n            studentID,\n            firstName,\n            lastName,\n            fathersName,\n            mothersName,\n            Address,\n            grade,\n            section,\n            email,\n            password: hashedPassword\n        });\n\n        await newStudent.save();\n\n        console.log(\"✅ Student created successfully:\", newStudent.studentID);\n\n        res.status(201).json({\n            message: \"Student added successfully\",\n            student: {\n                studentID: newStudent.studentID,\n                firstName: newStudent.firstName,\n                email: newStudent.email,\n                grade: newStudent.grade\n            }\n        });\n\n    } catch (err) {\n        console.error(\"❌ Error adding student:\", err);\n\n        if (err.code === 11000) {\n            if (err.keyPattern.studentID) {\n                return res.status(400).json({ message: \"Student ID already exists\" });\n            }\n            if (err.keyPattern.email) {\n                return res.status(400).json({ message: \"Email already exists\" });\n            }\n        }\n\n        res.status(500).json({ message: \"Server error while adding student\" });\n    }\n};\n\n// 🗑️ DELETE STUDENT\nconst deleteStudent = async (req, res) => {\n    const { id } = req.params;\n\n    try {\n        const deletedStudent = await Student.findByIdAndDelete(id);\n        if (!deletedStudent) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n        res.status(200).json({ message: \"Student deleted successfully\" });\n    } catch (err) {\n        console.error(\"❌ Error deleting student:\", err);\n        res.status(500).json({ message: \"Server error while deleting student\" });\n    }\n};\n\n// 📦 GET ALL STUDENTS\nconst getAllStudents = async (req, res) => {\n    try {\n        const students = await Student.find().sort({ createdAt: -1 });\n        res.status(200).json(students);\n    } catch (err) {\n        console.error(\"❌ Error fetching students:\", err);\n        res.status(500).json({ message: \"Server error while fetching students\" });\n    }\n};\n\n// 🔍 GET STUDENT BY ID\nconst getStudentById = async (req, res) => {\n    const { id } = req.params;\n\n    try {\n        const student = await Student.findById(id);\n        if (!student) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n        res.status(200).json(student);\n    } catch (err) {\n        console.error(\"❌ Error fetching student:\", err);\n        res.status(500).json({ message: \"Server error while fetching student\" });\n    }\n};\n\nmodule.exports = {\n    addStudent,\n    deleteStudent,\n    getAllStudents,\n    getStudentById\n};\n","size_bytes":7915},"backend/Controller/Admin/TeacherController.js":{"content":"// const Teacher = require('../../Models/Teacher');\n//\n// //  Get all teachers\n// const getAllTeachers = async (req, res) => {\n//     try {\n//         const teachers = await Teacher.find({});\n//         res.status(200).json(teachers);\n//     } catch (err) {\n//         console.error(\"Error fetching teachers:\", err);\n//         res.status(500).json({ message: \"Server error while fetching teachers\" });\n//     }\n// };\n//\n// //  Get single teacher by ID\n// const getTeacherById = async (req, res) => {\n//     const teacherID = req.params.id;\n//     try {\n//         const teacher = await Teacher.findOne({ teacherID: teacherID });\n//         if (!teacher) {\n//             return res.status(404).json({ message: \"Teacher not found\" });\n//         }\n//         res.status(200).json(teacher);\n//     } catch (err) {\n//         console.error(\"Error fetching teacher:\", err);\n//         res.status(500).json({ message: \"Server error while fetching teacher\" });\n//     }\n// };\n//\n// //  Add a new teacher\n// const createTeacher = async (req, res) => {\n//     const { teachersID, firstName, lastName, Address, email, password } = req.body;\n//\n//     if (!teachersID || !firstName || !Address || !email || !password) {\n//         return res.status(400).json({ message: \"All required fields must be filled\" });\n//     }\n//\n//     try {\n//         // Check if teachersID or email already exists\n//         const existingTeacher = await Teacher.findOne({ $or: [{ teacherID }, { email }] });\n//         if (existingTeacher) {\n//             return res.status(409).json({ message: \"Teacher ID or Email already exists\" });\n//         }\n//\n//         const newTeacher = new Teacher({\n//             teacherID,\n//             firstName,\n//             lastName,\n//             Address,\n//             email,\n//             password, // Assume hashed if frontend handles it; else hash here\n//         });\n//\n//         await newTeacher.save();\n//         res.status(201).json({ message: \"Teacher created successfully\", teacher: newTeacher });\n//     } catch (err) {\n//         console.error(\"Error creating teacher:\", err);\n//         res.status(500).json({ message: \"Server error while creating teacher\" });\n//     }\n// };\n//\n// //  Update a teacher\n// const updateTeacher = async (req, res) => {\n//     const teacherID = req.params.id;\n//     const updates = req.body;\n//\n//     try {\n//         const updatedTeacher = await Teacher.findOneAndUpdate(\n//             { teacherID: teacherID },\n//             updates,\n//             { new: true }\n//         );\n//         if (!updatedTeacher) {\n//             return res.status(404).json({ message: \"Teacher not found\" });\n//         }\n//         res.status(200).json({ message: \"Teacher updated successfully\", teacher: updatedTeacher });\n//     } catch (err) {\n//         console.error(\"Error updating teacher:\", err);\n//         res.status(500).json({ message: \"Server error while updating teacher\" });\n//     }\n// };\n//\n// //  Delete a teacher\n// const deleteTeacher = async (req, res) => {\n//     const teacherID = req.params.id;\n//     try {\n//         const deletedTeacher = await Teacher.findOneAndDelete({ teacherID: teacherID });\n//         if (!deletedTeacher) {\n//             return res.status(404).json({ message: \"Teacher not found\" });\n//         }\n//         res.status(200).json({ message: \"Teacher deleted successfully\" });\n//     } catch (err) {\n//         console.error(\"Error deleting teacher:\", err);\n//         res.status(500).json({ message: \"Server error while deleting teacher\" });\n//     }\n// };\n//\n// module.exports = {\n//     getAllTeachers,\n//     getTeacherById,\n//     createTeacher,\n//     updateTeacher,\n//     deleteTeacher\n// };\nconst Teacher = require('../../Models/Teacher');\nconst bcrypt = require('bcrypt');\n\n// 📝 Add a new teacher\nconst createTeacher = async (req, res) => {\n    try {\n        const { teacherID, firstName, lastName, Address, email, password } = req.body;\n\n        console.log(\"📥 Add Teacher Request Body:\", req.body);\n\n        // 🔥 Validate required fields\n        if (!teacherID || !firstName || !Address || !email || !password) {\n            return res.status(400).json({ message: \"All required fields must be filled\" });\n        }\n\n        // 🌟 Check for duplicate teacherID or email\n        const existingTeacher = await Teacher.findOne({\n            $or: [{ teacherID }, { email }]\n        });\n\n        if (existingTeacher) {\n            if (existingTeacher.teacherID === teacherID) {\n                return res.status(400).json({ message: \"Teacher ID already exists\" });\n            }\n            if (existingTeacher.email === email) {\n                return res.status(400).json({ message: \"Email already exists\" });\n            }\n        }\n\n        // 🔒 Hash password\n        const hashedPassword = await bcrypt.hash(password, 12);\n\n        // 📦 Create new teacher\n        const newTeacher = new Teacher({\n            teacherID,      // ← FIXED: was teachersID\n            firstName,\n            lastName,\n            Address,\n            email,\n            password: hashedPassword  // ← FIXED: now hashed\n        });\n\n        await newTeacher.save();\n\n        console.log(\"✅ Teacher created successfully:\", newTeacher.teacherID);\n\n        res.status(201).json({\n            message: \"Teacher added successfully\",\n            teacher: {\n                teacherID: newTeacher.teacherID,\n                firstName: newTeacher.firstName,\n                email: newTeacher.email\n            }\n        });\n\n    } catch (err) {\n        console.error(\"❌ Error adding teacher:\", err);\n\n        if (err.code === 11000) {\n            if (err.keyPattern.teacherID) {\n                return res.status(400).json({ message: \"Teacher ID already exists\" });\n            }\n            if (err.keyPattern.email) {\n                return res.status(400).json({ message: \"Email already exists\" });\n            }\n        }\n\n        res.status(500).json({ message: \"Server error while adding teacher\" });\n    }\n};\n\n// 🔍 Get single teacher by ID\nconst getTeacherById = async (req, res) => {\n    const teacherID = req.params.id;\n    try {\n        const teacher = await Teacher.findOne({ teacherID: teacherID }); // ← FIXED: was teachersID\n        if (!teacher) {\n            return res.status(404).json({ message: \"Teacher not found\" });\n        }\n        res.status(200).json(teacher);\n    } catch (err) {\n        console.error(\"Error fetching teacher:\", err);\n        res.status(500).json({ message: \"Server error while fetching teacher\" });\n    }\n};\n\n// 🗑️ Delete a teacher\nconst deleteTeacher = async (req, res) => {\n    const teacherID = req.params.id;\n    try {\n        const deletedTeacher = await Teacher.findOneAndDelete({ teacherID: teacherID }); // ← FIXED: was teachersID\n        if (!deletedTeacher) {\n            return res.status(404).json({ message: \"Teacher not found\" });\n        }\n        res.status(200).json({ message: \"Teacher deleted successfully\" });\n    } catch (err) {\n        console.error(\"Error deleting teacher:\", err);\n        res.status(500).json({ message: \"Server error while deleting teacher\" });\n    }\n};\n\n// 📝 Update a teacher\nconst updateTeacher = async (req, res) => {\n    const teacherID = req.params.id;\n    const updates = req.body;\n\n    try {\n        const updatedTeacher = await Teacher.findOneAndUpdate(\n            { teacherID: teacherID }, // ← FIXED: was teachersID\n            updates,\n            { new: true }\n        );\n        if (!updatedTeacher) {\n            return res.status(404).json({ message: \"Teacher not found\" });\n        }\n        res.status(200).json({ message: \"Teacher updated successfully\", teacher: updatedTeacher });\n    } catch (err) {\n        console.error(\"Error updating teacher:\", err);\n        res.status(500).json({ message: \"Server error while updating teacher\" });\n    }\n};\n\n// 📦 Get all teachers (this one was correct)\nconst getAllTeachers = async (req, res) => {\n    try {\n        const teachers = await Teacher.find({}).sort({ createdAt: -1 });\n        res.status(200).json(teachers);\n    } catch (err) {\n        console.error(\"Error fetching teachers:\", err);\n        res.status(500).json({ message: \"Server error while fetching teachers\" });\n    }\n};\n\nmodule.exports = {\n    getAllTeachers,\n    getTeacherById,\n    createTeacher,\n    updateTeacher,\n    deleteTeacher\n};\n","size_bytes":8378},"backend/Controller/Teacher/AttendanceController.js":{"content":"const Attendance = require('../../Models/Attendance');\nconst Teacher = require('../../Models/Teacher');\nconst Student = require('../../Models/Student');\n\n//GETTING ALL ATTENDANCE RECORDS\nconst getAllAttendance = async(req,res)=>{\n    try{\n        const records = await Attendance.find({});\n        res.status(200).json(records);\n    }catch(err){\n        console.log(\"Error fetching the Attendance details\",err);\n        res.status(500).json({message:\"Server error fetching attendance\"})\n    }\n};\n\n//GETTING ALL ATTENDANCE BY STUDENT ID\nconst getStudentAttendance = async(req,res)=>{\n    const studentID = req.params.id;\n    try{\n        const records = await Attendance.find({studentID})\n        if(!records.length){\n            return res.status(404).json({message:\"No attendance records found for this student\"});\n        }\n        res.status(200).json(records);\n    }catch(err){\n        console.log(\"Error fetching student attendance\",err);\n        res.status(500).json({message:\"Server error fetching student attendance\"})\n    }\n};\n\n//UPDATING AN EXISTING RECORD\nconst updateAttendance = async(req,res)=>{\n    const studentID = req.params.id;\n    const updates = req.body;\n\n    //get today's date\n    const today = new Date().toISOString().split('T')[0];\n    try{\n        const updatedRecord = await Attendance.findOneAndUpdate(\n            {studentID,date:today},\n            updates,\n            {new:true}\n        );\n        if(!updatedRecord){\n            return res.status(404).json({message:\"No attendance record found for this student today\"})\n        }\n        res.status(200).json({message:\"Today's attendance updated\",data: updatedRecord});\n    }catch(err){\n        console.log(\"Error updating the attendance\", err);\n        res.status(500).json({message:\"Server error while updating the attendance\"});\n    }\n};\n\n// DELETE ATTENDANCE\nconst deleteAttendance = async(req,res)=>{\n    const studentID = req.params.id;\n\n    //Get today's attendance\n    const today = new Date().toISOString().split('T')[0];\n\n    try{\n        const deletedRecord = await Attendance.findOneAndDelete({studentID,date:today});\n        if(!deletedRecord){\n            return res.status(404).json({message:\"No attendance record found for this student today\"})\n        }\n        res.status(200).json({message:\"Today's attendance deleted successfully\"})\n    }catch(err){\n        console.log(\"Error deleting attendance\",err);\n        res.status(500).json({message:\"Server error while deleting attendance\"});\n    }\n};\n\n//MARKING THE ATTENDANCE\nconst markAttendance = async (req, res) => {\n    const { studentID, status } = req.body;\n\n    if (!studentID || !status) {\n        return res.status(400).json({ message: \"Student ID and status are required\" });\n    }\n\n    if (![\"Present\", \"Absent\"].includes(status)) {\n        return res.status(400).json({ message: \"Status must be 'Present' or 'Absent'\" });\n    }\n\n    try {\n        // Check if student exists\n        const studentExist = await Student.findOne({ studentID });\n        if (!studentExist) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n\n        // Get today's date\n        const today = new Date().toISOString().split('T')[0];\n\n        // Check if attendance already marked\n        const existingRecord = await Attendance.findOne({ studentID, date: today });\n        if (existingRecord) {\n            return res.status(400).json({ message: \"Attendance is already marked for today\" });\n        }\n\n        // Get last totals\n        const lastRecord = await Attendance.findOne({ studentID }).sort({ date: -1 });\n        let totalPresent = lastRecord ? lastRecord.totalPresent : 0;\n        let totalDays = lastRecord ? lastRecord.totalDays : 0;\n\n        // Increment totals\n        totalDays += 1;\n        if (status === \"Present\") totalPresent += 1;\n\n        // Create new attendance record\n        const newRecord = new Attendance({\n            studentID,\n            date: today,\n            status,\n            totalPresent,\n            totalDays\n        });\n\n        await newRecord.save();\n\n        res.status(201).json({\n            message: \"The attendance has been marked successfully\",\n            data: newRecord\n        });\n\n    } catch (err) {\n        console.log(\"Error marking the attendance\", err);\n        res.status(500).json({ message: \"Server error while marking the attendance\" });\n    }\n};\n\nmodule.exports={\n    getStudentAttendance,\n    getAllAttendance,\n    updateAttendance,\n    markAttendance,\n    deleteAttendance\n}","size_bytes":4521},"backend/Controller/Teacher/CalendarController.js":{"content":"const Calendar = require('../../Models/Calendar');\n\n//GET ALL CALENDAR EVENTS\nconst getAllCalendarEvents = async(req,res)=>{\n    try{\n        const events = await Calendar.find().sort({date:1});\n        res.status(200).json(events)\n    }catch(err){\n        console.log(\"Error fetching the Calendar details\",err);\n        res.status(500).json({message:\"Server error while fetching calendar\"})\n    }\n};\nmodule.exports = {\n    getAllCalendarEvents\n};\n//teacher will not have the access to create any updates in the calendar cause it is responsible for its class only not the whole schoool","size_bytes":585},"backend/Controller/Teacher/HomeworkController.js":{"content":"const Homework = require('../../Models/Homework');\n\n//View all homework\nconst getAllHomework = async(req,res)=>{\n    try{\n        const homeworkList = await Homework.find().sort({date:-1});//latest first (use -1 for descending)\n        res.status(200).json(homeworkList);\n    }catch(err){\n        console.log(\"Error fetching homework\",err);\n        res.status(500).json({message:\"Server error while fetching homework\"});\n    }\n};\n\n//View homework in range\nconst getHomeworkByRange = async (req,res)=>{\n    const {fromDate,toDate}= req.body;\n\n    if(!fromDate || !toDate){\n        return res.status(400).json({message:\"Both fromDate and toDate are required\"});\n    }\n\n    try{\n        const homeworkByRange = await Homework.find({\n            date: {\n                $gte: new Date(fromDate),\n                $lte: new Date(toDate)\n            }\n        }).sort({date:-1});\n\n        res.status(200).json(homeworkByRange);\n    }catch(err){\n        console.log(\"Error fetching homework by range\",err);\n        res.status(500).json({message:\"Server error while fetching homework by range\"});\n    }\n};\n\n//create a Homework\nconst createHomework = async(req,res)=>{\n    const {studentID,title,description,assignDate,dueDate,date} = req.body;\n\n    if(!studentID || !title || !description || !assignDate || !dueDate || !date ){\n        return res.status(400).json({message:\"All the fields are required\"});\n    }\n\n    //check if the date is today\n    const today = new Date().toISOString().split('T')[0];\n    const homeworkDate = new Date(date).toISOString().split('T')[0];\n\n    if(homeworkDate !== today){\n        return res.status(400).json({message:\"You can only create homework for today\"});\n    }\n\n    try{\n        const newHomework = new Homework({\n            studentID,\n            title,\n            description,\n            assignDate,\n            dueDate,\n            date\n        });\n        await newHomework.save();\n\n        res.status(201).json({message:\"Homework created successfully\",homework:newHomework});\n    }catch (err){\n        console.log(\"Error creating homework\",err);\n        res.status(500).json({message:\"Server error while creating homework\"});\n    }\n};\n\n//edit homework (today only)\nconst editHomework = async(req,res)=>{\n    const {homeworkID} = req.body;\n    const updates = req.body;\n\n    if(!homeworkID){\n        return res.status(400).json({message:\"Homework ID is required\"});\n    }\n\n    try{\n        const homework = await Homework.findById(homeworkID);\n        if(!homework){\n            return res.status(404).json({message:\"Homework not found\"});\n        }\n\n        //only allow edit if date=today\n        const today = new Date().toISOString().split('T')[0];\n        const homeworkDate = new Date(homework.date).toISOString().split('T')[0];\n\n        if(homeworkDate !== today){\n            return res.status(400).json({message:\"You can only edit today's homework\"});\n        }\n\n        delete updates.homeworkID;\n\n        const updatedHomework = await Homework.findByIdAndUpdate(homeworkID,updates,{new:true});\n        res.status(200).json({message:\"Homework updated successfully\",homework:updatedHomework});\n\n    }catch(err){\n        console.log(\"Error updating homework\",err);\n        res.status(500).json({message:\"Server error while updating homework\"});\n    }\n};\n\n//delete homework\nconst deleteHomework = async(req,res)=>{\n    const {homeworkID} = req.body;\n\n    if(!homeworkID){\n        return res.status(400).json({message:\"Homework ID is required\"});\n    }\n\n    try{\n        const homework = await Homework.findById(homeworkID);\n\n        if(!homework){\n            return res.status(404).json({message:\"Homework not found\"});\n        }\n\n        //only allow delete if date=today\n        const today = new Date().toISOString().split('T')[0];\n        const homeworkDate = new Date(homework.date).toISOString().split('T')[0];\n\n        if(homeworkDate !== today){\n            return res.status(400).json({message:\"You can only delete today's homework\"});\n        }\n\n        const deletedHomework = await Homework.findByIdAndDelete(homeworkID);\n        res.status(200).json({message:\"Homework deleted successfully\",homework:deletedHomework});\n\n    }catch(err){\n        console.log(\"Error deleting homework\",err);\n        res.status(500).json({message:\"Server error while deleting homework\"});\n    }\n};\n\nmodule.exports = {\n    getAllHomework,\n    getHomeworkByRange,\n    createHomework,\n    editHomework,\n    deleteHomework\n};","size_bytes":4460},"backend/Controller/Teacher/MarksController.js":{"content":"const Marks = require('../../Models/Marks');\n\n//get all marks by student id\nconst getAllMarks = async (req,res)=>{\n    const studentID = req.params.id;\n    try{\n        const marksList = await Marks.find({studentID}).sort({date:-1});//show the latest first\n        if(marksList.length === 0){\n            return res.status(404).json({message:\"No marks found\"});\n        }\n        const categorizedMarks = marksList.reduce((acc,mark)=>{\n            if(!acc[mark.examType]){\n                acc[mark.examType] = [];\n            }\n            acc[mark.examType].push(mark);\n            return acc;\n        },{});\n        res.status(200).json(categorizedMarks);\n    }catch (err){\n        console.log(\"Error fetching all marks\",err);\n        res.status(500).json({message:\"Server error while fetching marks \"});\n    }\n};\n\n//create marks\n\nconst createMarks = async(req,res)=>{\n    const {studentID,subject,marksObtained,totalMarks,examType,semester,date} = req.body;\n    if(!studentID || !subject ||!marksObtained || !totalMarks || !examType || !semester || !date){\n        return res.status(400).json({message:\"Missing required fields\"});\n    }\n    try{\n        const newMarks = new Marks({\n            studentID,\n            subject,\n            marksObtained,\n            totalMarks,\n            examType,\n            semester,\n            date:date //will have to provide a date\n        });\n        await newMarks.save();\n        return res.status(201).json({message:\"Marks created successfully\",data:newMarks});\n    }catch(err){\n        console.log(\"Error creating marks\",err);\n        return res.status(500).json({message:\"Server error while creating marks \"});\n    }\n};\n//edit marks\nconst editMarks = async(req,res)=>{\n    const marksID = req.params.id;\n    const updates = req.body;\n    try{\n\n        // Remove marksID from updates to prevent overwriting the ID\n        delete updates.marksID;\n\n\n        const updateMarks = await Marks.findByIdAndUpdate(marksID,updates,{new:true});\n        if(!updateMarks){\n            return res.status(404).json({message:\"Marks not found\"});\n        }\n        return res.status(200).json({message:\"Marks updated successfully\",data:updateMarks});\n    }catch(err){\n        console.log(\"Error updating marks\",err);\n        return res.status(500).json({message:\"Server error while updating the marks\"});\n    }\n};\n//delete marks\nconst deleteMarks = async(req,res)=>{\n    const marksID = req.params.id;\n    try{\n        const deletedMarks = await Marks.findByIdAndDelete(marksID);\n        if(!deletedMarks){\n            return res.status(404).json({message:\"Marks not found\"});\n        }\n        return res.status(200).json({message:\"Marks deleted successfully\",data:deletedMarks})\n    }catch(err){\n        console.log(\"Error deleting marks\",err);\n        return res.status(500).json({message:\"Server error while deleting the marks\"});\n    }\n};\nmodule.exports = {\n    getAllMarks,\n    createMarks,\n    editMarks,\n    deleteMarks\n};","size_bytes":2964},"backend/Controller/Teacher/NoticeController.js":{"content":"const Notice = require('../../Models/Notice');\n\n// GET ALL NOTICES CREATED BY THE TEACHER\nconst getAllNotices = async (req, res) => {\n    try {\n        const teacherID = req.teacherID;\n        const notices = await Notice.find({ teacherID }).sort({ date: -1 }); // Latest first\n        res.status(200).json(notices);\n    } catch (err) {\n        console.error(\"Error fetching notices:\", err);\n        res.status(500).json({ message: \"Server error while fetching notices\" });\n    }\n};\n\n// GET NOTICES BY DATE CREATED BY THE TEACHER\nconst getNoticesByDate = async (req, res) => {\n    const { date } = req.body;\n\n    if (!date) {\n        return res.status(400).json({ message: \"Date is required\" });\n    }\n\n    try {\n        const teacherID = req.teacherID;\n        const notices = await Notice.find({\n            teacherID,\n            date: new Date(date)\n        });\n        res.status(200).json(notices);\n    } catch (err) {\n        console.error(\"Error fetching notices by date:\", err);\n        res.status(500).json({ message: \"Server error while fetching notices by date\" });\n    }\n};\n\n// CREATE NOTICE (AUTO ATTACH TEACHER ID)\nconst createNotice = async (req, res) => {\n    const { classID, title, description, date } = req.body;\n\n    if (!classID || !title || !description || !date) {\n        return res.status(400).json({ message: \"All fields are required\" });\n    }\n\n    try {\n        const newNotice = new Notice({\n            teacherID: req.teacherID, // auto attach\n            classID,\n            title,\n            description,\n            date: new Date(date)\n        });\n\n        await newNotice.save();\n\n        res.status(201).json({\n            message: \"Notice created successfully\",\n            notice: newNotice\n        });\n    } catch (err) {\n        console.error(\"Error creating notice:\", err);\n        res.status(500).json({ message: \"Server error while creating notice\" });\n    }\n};\n\n// DELETE NOTICE (ONLY IF CREATED BY THIS TEACHER)\nconst deleteNotice = async (req, res) => {\n    const noticeID = req.params.id;\n\n    try {\n        const notice = await Notice.findById(noticeID);\n\n        if (!notice) {\n            return res.status(404).json({ message: \"Notice not found\" });\n        }\n\n        // Check if this teacher created the notice\n        if (notice.teacherID.toString() !== req.teacherID.toString()) {\n            return res.status(403).json({ message: \"You are not authorized to delete this notice\" });\n        }\n\n        await Notice.findByIdAndDelete(noticeID);\n        res.status(200).json({ message: \"Notice deleted successfully\" });\n    } catch (err) {\n        console.error(\"Error deleting notice:\", err);\n        res.status(500).json({ message: \"Server error while deleting notice\" });\n    }\n};\n\nmodule.exports = {\n    getAllNotices,\n    getNoticesByDate,\n    createNotice,\n    deleteNotice\n};","size_bytes":2838},"backend/Controller/Teacher/StudentController.js":{"content":"const Student = require('../../Models/Student');\nconst Teacher = require('../../Models/Teacher');\n\n// 1. Get all students in a teacher's class (grade + section based)\nconst getStudentsInClass = async (req, res) => {\n    const { grade, section } = req.query;\n\n    if (!grade || !section) {\n        return res.status(400).json({ message: \"Grade and section are required\" });\n    }\n\n    try {\n        const students = await Student.find({ grade, section });\n        if (!students.length) {\n            return res.status(404).json({ message: \"No students found in this class\" });\n        }\n\n        res.status(200).json(students);\n    } catch (err) {\n        console.log(\"Error fetching students in class\", err);\n        res.status(500).json({ message: \"Server error while fetching students\" });\n    }\n};\n\n// 2. Get student by student ID\nconst getStudentByID = async (req, res) => {\n    const studentID = req.params.id;\n\n    try {\n        const student = await Student.findOne({ studentID });\n        if (!student) {\n            return res.status(404).json({ message: \"Student not found\" });\n        }\n\n        res.status(200).json(student);\n    } catch (err) {\n        console.log(\"Error fetching student by ID\", err);\n        res.status(500).json({ message: \"Server error while fetching student by ID\" });\n    }\n};\n\n// 3. Get students by first name (case-insensitive search)\nconst getStudentsByName = async (req, res) => {\n    const { name } = req.query;\n\n    if (!name) {\n        return res.status(400).json({ message: \"Name is required for search\" });\n    }\n\n    try {\n        const students = await Student.find({\n            firstName: { $regex: new RegExp(name, 'i') } // Case-insensitive search\n        });\n\n        if (!students.length) {\n            return res.status(404).json({ message: \"No students found with this name\" });\n        }\n\n        res.status(200).json(students);\n    } catch (err) {\n        console.log(\"Error searching students by name\", err);\n        res.status(500).json({ message: \"Server error while searching students by name\" });\n    }\n};\n\nmodule.exports = {\n    getStudentsInClass,\n    getStudentByID,\n    getStudentsByName\n};","size_bytes":2156},"backend/Controller/Teacher/TimetableController.js":{"content":"const Timetable = require('../../Models/Timetable');\n\n//  Get timetable for the teacher's assigned class\nconst getMyClassTimetable = async (req, res) => {\n    try {\n        const classId = req.teacher.classId; // 👈 we assume classId is stored in teacher profile\n\n        const timetable = await Timetable.findOne({ classId });\n\n        if (!timetable) {\n            return res.status(404).json({ message: `No timetable found for class ${classId}` });\n        }\n\n        res.status(200).json(timetable);\n    } catch (error) {\n        console.error(\"Error fetching teacher's timetable:\", error);\n        res.status(500).json({ message: \"Server error while fetching timetable\" });\n    }\n};\n\nmodule.exports = {\n    getMyClassTimetable\n};","size_bytes":736},"backend/Controller/Teacher/teacherAuthController.js":{"content":"const Teacher = require('../../Models/Teacher');\nconst bcrypt = require('bcrypt');\nconst { generateToken } = require('../../utlis/jwtHelpers');\n\nexports.login = async(req, res) => {\n    const { teacherID, password } = req.body;\n    console.log(\"🔍 Login attempt - TeacherID:\", teacherID, \"Password:\", password);\n\n    if (!teacherID || !password) {\n        return res.status(400).json({ message: \"TeacherID and password are required\" });\n    }\n\n    try {\n        // Finding the teacher\n        const teacherData = await Teacher.findOne({ teacherID: teacherID });\n        console.log(\"👤 Teacher found:\", teacherData ? \"YES\" : \"NO\");\n\n        if (!teacherData) {\n            return res.status(404).json({ message: \"Teacher not found\" });\n        }\n\n        console.log(\"🔐 Stored hash:\", teacherData.password);\n        console.log(\"🔑 Input password:\", password);\n\n        // Comparing passwords\n        const isMatch = await bcrypt.compare(password, teacherData.password);\n        console.log(\"✅ Password match:\", isMatch);\n\n        if (!isMatch) {\n            return res.status(400).json({ message: \"Invalid credentials\" });\n        }\n\n        // Update last login\n        await Teacher.findByIdAndUpdate(teacherData._id, {\n            lastLoginAt: new Date()\n        });\n\n        // Generate JWT token\n        const token = generateToken({\n            teacherID: teacherData.teacherID,\n            id: teacherData._id,\n            role: 'teacher'\n        });\n\n        res.status(200).json({\n            message: `Welcome ${teacherData.firstName} ${teacherData.lastName || ''}`.trim(),\n            teacherID: teacherData.teacherID,\n            email: teacherData.email,\n            token: token\n        });\n\n    } catch (err) {\n        console.error(\"Login Error:\", err);\n        res.status(500).json({ message: \"Server error during login\" });\n    }\n};\n\n// Logout for teacher\nexports.logout = async(req, res) => {\n    // For JWT, logout is handled client-side by removing the token\n    res.status(200).json({ message: \"Teacher logged out successfully\" });\n};","size_bytes":2068},"backend/Routes/Admin/AdminAuth.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/AdminAuth');\nconst validate = require('../../Middleware/Validation');\n\n// Import Controller\nconst { login, logout } = require('../../Controller/Admin/AdminAuthController');\n\n// 🔥 Admin Login Route\nrouter.post('/login', validate.validateAdminLogin, auth.requireGuest, login);\n\n// 🔥 Admin Logout Route\nrouter.post('/logout', auth.requireAuth, logout);\n\nmodule.exports = router;\n","size_bytes":490},"backend/Routes/Admin/Calendar.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/AdminAuth');\n\n// Import controller functions\nconst {\n    getAllCalendarEvents,\n    createCalendarEvent,\n    updateCalendarEvent,\n    deleteCalendarEvent\n} = require('../../Controller/Admin/CalendarController');\n\n//  Get all calendar events\nrouter.get(\"/\", auth.requireAuth, getAllCalendarEvents);\n\n//  Create a new calendar event\nrouter.post(\"/\", auth.requireAuth, createCalendarEvent);\n\n//  Update a calendar event by ID\nrouter.patch(\"/:id\", auth.requireAuth, updateCalendarEvent);\n\n//  Delete a calendar event by ID\nrouter.delete(\"/:id\", auth.requireAuth, deleteCalendarEvent);\n\nmodule.exports = router;\n","size_bytes":714},"backend/Routes/Admin/Student.js":{"content":"\nconst express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/AdminAuth');\nconst validation = require('../../Middleware/Validation');\n\n// 💥 Import Controller\nconst {\n    addStudent,\n    deleteStudent,\n    getAllStudents,\n    getStudentById\n} = require('../../Controller/Admin/StudentController');\n\n// 🌟 Routes\n\n// Get all students\nrouter.get(\"/\", auth.requireAuth, getAllStudents);\n\n// Get single student by ID\nrouter.get(\"/:id\", auth.requireAuth, getStudentById);\n\n// Add new student\nrouter.post(\"/\", auth.requireAuth, addStudent);\n\n// Delete student\nrouter.delete(\"/:id\", auth.requireAuth, deleteStudent);\n\nmodule.exports = router;\n\n\n","size_bytes":689},"backend/Routes/Admin/Teacher.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/TeacherAuth');\n\n// Import controller functions\nconst {\n    getAllTeachers,\n    getTeacherById,\n    createTeacher,\n    updateTeacher,\n    deleteTeacher\n} = require('../../Controller/Admin/TeacherController');\n\n//  Get all teachers\nrouter.get(\"/\", auth.requireAuth, getAllTeachers);\n\n//  Get single teacher by teachersID\nrouter.get(\"/:id\", auth.requireAuth, getTeacherById);\n\n//  Create a new teacher\nrouter.post(\"/\", auth.requireAuth, createTeacher);\n\n//  Update a teacher by teachersID\nrouter.patch(\"/:id\", auth.requireAuth, updateTeacher);\n\n//  Delete a teacher by teachersID\nrouter.delete(\"/:id\", auth.requireAuth, deleteTeacher);\n\nmodule.exports = router;\n","size_bytes":767},"backend/Routes/Teacher/Attendance.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/TeacherAuth');\n\n//import controller function\nconst{\n    getStudentAttendance,\n    getAllAttendance,\n    updateAttendance,\n    markAttendance,\n    deleteAttendance\n\n} = require('../../Controller/Teacher/AttendanceController')\n\n//routes\n// ✅ Get student  attendance by id\nrouter.get(\"/\",auth.requireAuth,getAllAttendance);\n//marking the attendance\nrouter.post(\"/\",auth.requireAuth,markAttendance);\n//get student attendance by id\nrouter.get(\"/:id\",auth.requireAuth,getStudentAttendance);\n//update attendance\nrouter.patch(\"/:id\",auth.requireAuth,updateAttendance);\n//delete attendance\nrouter.delete(\"/:id\",auth.requireAuth,deleteAttendance);\n\nmodule.exports = router;","size_bytes":773},"backend/Routes/Teacher/Calendar.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/TeacherAuth');\n\n//import controller function\nconst {\n    getAllCalendarEvents\n} = require('../../Controller/Teacher/CalendarController');\n\n//routes\n// ✅ Get all calendar events (read-only for teachers)\nrouter.get(\"/\", auth.requireAuth, getAllCalendarEvents);\n\nmodule.exports = router;","size_bytes":394},"backend/Routes/Teacher/Homework.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/TeacherAuth');\n\n//import controller function\nconst {\n    getAllHomework,\n    getHomeworkByRange,\n    createHomework,\n    editHomework,\n    deleteHomework\n} = require('../../Controller/Teacher/HomeworkController');\n\n//routes\n// ✅ Get all homework\nrouter.get(\"/\", auth.requireAuth, getAllHomework);\n\n// ✅ Create new homework\nrouter.post(\"/\", auth.requireAuth, createHomework);\n\n// ✅ Get homework by date range\nrouter.post(\"/range\", auth.requireAuth, getHomeworkByRange);\n\n// ✅ Edit homework\nrouter.patch(\"/\", auth.requireAuth, editHomework);\n\n// ✅ Delete homework\nrouter.delete(\"/\", auth.requireAuth, deleteHomework);\n\nmodule.exports = router;","size_bytes":759},"backend/Routes/Teacher/Marks.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/TeacherAuth');\n\n//import controller function\nconst{\n    getAllMarks,\n    createMarks,\n    editMarks,\n    deleteMarks\n} = require('../../Controller/Teacher/MarksController')\n\n//routes\n// ✅ Get all marks by student ID\nrouter.get(\"/:id\", auth.requireAuth, getAllMarks);\n\n// ✅ Create new marks\nrouter.post(\"/\", auth.requireAuth, createMarks);\n\n// ✅ Edit marks by marks ID\nrouter.patch(\"/:id\", auth.requireAuth, editMarks);\n\n// ✅ Delete marks by marks ID\nrouter.delete(\"/:id\", auth.requireAuth, deleteMarks);\n\nmodule.exports = router;","size_bytes":645},"backend/Routes/Teacher/Notice.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/TeacherAuth');\n\n// import controller functions\nconst {\n    getAllNotices,\n    getNoticesByDate,\n    createNotice,\n    deleteNotice\n} = require('../../Controller/Teacher/NoticeController');\n\n// routes\nrouter.get(\"/\", auth.requireAuth, getAllNotices);\nrouter.post(\"/date\", auth.requireAuth, getNoticesByDate);\nrouter.post(\"/\", auth.requireAuth, createNotice);\nrouter.delete(\"/:id\", auth.requireAuth, deleteNotice);\n\nmodule.exports = router;","size_bytes":546},"backend/Routes/Teacher/TeacherAuth.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst validation = require('../../Middleware/validation');\nconst teacherAuthController = require('../../Controller/Teacher/teacherAuthController');\nconst auth = require('../../Middleware/TeacherAuth');\n\n// ADD DEBUG MIDDLEWARE\nconst debugMiddleware = (req, res, next) => {\n    console.log(`🔍 ${req.method} ${req.path} - Body:`, req.body);\n    console.log('🔑 Auth Header:', req.headers.authorization);\n    next();\n};\n\n// LOGIN ROUTE\nrouter.post('/login',\n    debugMiddleware,\n    validation.validateTeacherLogin,\n    auth.requireGuest,\n    teacherAuthController.login\n);\n\n// LOGOUT ROUTE\nrouter.post('/logout', auth.requireAuth, teacherAuthController.logout);\n\n// PROTECTED ROUTES\nrouter.get('/profile', auth.requireAuth, (req, res) => {\n    res.json({\n        message: \"Your profile page\",\n        teacher: req.teacher,\n        teacherId: req.teacherID\n    });\n});\n\nrouter.get('/dashboard', auth.requireAuth, (req, res) => {\n    res.json({\n        message: `Welcome to dashboard, ${req.teacher.firstName} ${req.teacher.lastName || ''}!`.trim(),\n        teacherId: req.teacherID\n    });\n});\n\nmodule.exports = router;","size_bytes":1190},"backend/Routes/Teacher/Timetable.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst auth = require('../../Middleware/TeacherAuth');\n\n// Import controller function\nconst {\n    getMyClassTimetable\n} = require('../../Controller/Teacher/TimetableController');\n\n// Routes\n// ✅ Get teacher's class timetable\nrouter.get(\"/\", auth.requireAuth, getMyClassTimetable);\n\nmodule.exports = router;","size_bytes":376},"frontend/README.md":{"content":"# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.\\\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n","size_bytes":2117},"frontend/src/App.css":{"content":".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n","size_bytes":564},"frontend/src/App.test.tsx":{"content":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n","size_bytes":273},"frontend/src/App.tsx":{"content":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider, useAuth } from './context/AuthContext';\nimport HomePage from './components/HomePage';\nimport Login from './components/Login/Login';\nimport Layout from './components/Layout/Layout';\nimport './App.css';\n\n// Simple dashboard components for now\nconst StudentDashboard: React.FC = () => {\n  const { user } = useAuth();\n  \n  return React.createElement(Layout, { title: 'Student Dashboard', children:\n    React.createElement('div', null,\n      React.createElement('h2', null, `Welcome, ${user?.firstName}!`),\n      React.createElement('div', { \n        style: { \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n          gap: '20px',\n          marginTop: '30px'\n        }\n      },\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#3b82f6' } }, 'Attendance'),\n          React.createElement('p', null, 'View your attendance records')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#10b981' } }, 'Homework'),\n          React.createElement('p', null, 'Check your assignments')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#f59e0b' } }, 'Marks'),\n          React.createElement('p', null, 'View your test scores')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#ef4444' } }, 'Notices'),\n          React.createElement('p', null, 'Important announcements')\n        )\n      )\n    ) });\n};\n\nconst TeacherDashboard: React.FC = () => {\n  const { user } = useAuth();\n  \n  return React.createElement(Layout, { title: 'Teacher Dashboard', children:\n    React.createElement('div', null,\n      React.createElement('h2', null, `Welcome, ${user?.firstName}!`),\n      React.createElement('div', { \n        style: { \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n          gap: '20px',\n          marginTop: '30px'\n        }\n      },\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#3b82f6' } }, 'Mark Attendance'),\n          React.createElement('p', null, 'Record student attendance')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#10b981' } }, 'Assign Homework'),\n          React.createElement('p', null, 'Create and manage assignments')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#f59e0b' } }, 'Grade Tests'),\n          React.createElement('p', null, 'Enter and manage student marks')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#ef4444' } }, 'Send Notices'),\n          React.createElement('p', null, 'Post announcements to students')\n        )\n      )\n    ) });\n};\n\nconst AdminDashboard: React.FC = () => {\n  const { user } = useAuth();\n  \n  return React.createElement(Layout, { title: 'Admin Dashboard', children:\n    React.createElement('div', null,\n      React.createElement('h2', null, `Welcome, ${user?.firstName}!`),\n      React.createElement('div', { \n        style: { \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n          gap: '20px',\n          marginTop: '30px'\n        }\n      },\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#3b82f6' } }, 'Manage Students'),\n          React.createElement('p', null, 'Add, edit, and view students')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#10b981' } }, 'Manage Teachers'),\n          React.createElement('p', null, 'Add, edit, and view teachers')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#f59e0b' } }, 'Calendar'),\n          React.createElement('p', null, 'Manage school calendar events')\n        ),\n        React.createElement('div', { \n          style: { \n            background: 'white', \n            padding: '20px', \n            borderRadius: '8px', \n            boxShadow: '0 2px 4px rgba(0,0,0,0.1)' \n          }\n        },\n          React.createElement('h3', { style: { color: '#ef4444' } }, 'Reports'),\n          React.createElement('p', null, 'View system reports and analytics')\n        )\n      )\n    ) });\n};\n\n// Protected route component\nconst ProtectedRoute: React.FC<{ children: React.ReactNode; allowedRole: string }> = ({ children, allowedRole }) => {\n  const { isAuthenticated, user } = useAuth();\n  \n  if (!isAuthenticated) {\n    return React.createElement(Navigate, { to: '/', replace: true });\n  }\n  \n  if (user?.role !== allowedRole) {\n    return React.createElement(Navigate, { to: '/', replace: true });\n  }\n  \n  return React.createElement(React.Fragment, null, children);\n};\n\nfunction App() {\n  return React.createElement(AuthProvider, null,\n    React.createElement(Router, null,\n      React.createElement(Routes, null,\n        React.createElement(Route, { path: '/', element: React.createElement(HomePage) }),\n        React.createElement(Route, { \n          path: '/student-login', \n          element: React.createElement(Login, { userType: 'student' })\n        }),\n        React.createElement(Route, { \n          path: '/teacher-login', \n          element: React.createElement(Login, { userType: 'teacher' })\n        }),\n        React.createElement(Route, { \n          path: '/admin-login', \n          element: React.createElement(Login, { userType: 'admin' })\n        }),\n        React.createElement(Route, { \n          path: '/student-dashboard', \n          element: React.createElement(ProtectedRoute, { allowedRole: 'student', children: React.createElement(StudentDashboard) })\n        }),\n        React.createElement(Route, { \n          path: '/teacher-dashboard', \n          element: React.createElement(ProtectedRoute, { allowedRole: 'teacher', children: React.createElement(TeacherDashboard) })\n        }),\n        React.createElement(Route, { \n          path: '/admin-dashboard', \n          element: React.createElement(ProtectedRoute, { allowedRole: 'admin', children: React.createElement(AdminDashboard) })\n        })\n      )\n    )\n  );\n}\n\nexport default App;","size_bytes":8551},"frontend/src/components/HomePage.tsx":{"content":"import React from 'react';\n\nconst HomePage: React.FC = () => {\n  return React.createElement('div', { \n    style: { \n      textAlign: 'center', \n      padding: '60px 20px', \n      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',\n      minHeight: '100vh'\n    }\n  },\n    React.createElement('h1', { \n      style: { \n        fontSize: '48px', \n        marginBottom: '20px', \n        color: '#333' \n      } \n    }, 'Student Portal'),\n    \n    React.createElement('p', { \n      style: { \n        fontSize: '18px', \n        marginBottom: '40px', \n        color: '#666' \n      } \n    }, 'Welcome to the Student Portal. Please select your login type:'),\n    \n    React.createElement('div', { \n      style: { \n        display: 'flex', \n        gap: '20px', \n        justifyContent: 'center', \n        flexWrap: 'wrap' \n      } \n    },\n      React.createElement('a', {\n        href: '/student-login',\n        style: {\n          display: 'inline-block',\n          padding: '15px 30px',\n          background: '#3b82f6',\n          color: 'white',\n          textDecoration: 'none',\n          borderRadius: '8px',\n          fontSize: '16px',\n          fontWeight: '600',\n          transition: 'background-color 0.2s ease'\n        }\n      }, 'Student Login'),\n      \n      React.createElement('a', {\n        href: '/teacher-login',\n        style: {\n          display: 'inline-block',\n          padding: '15px 30px',\n          background: '#10b981',\n          color: 'white',\n          textDecoration: 'none',\n          borderRadius: '8px',\n          fontSize: '16px',\n          fontWeight: '600',\n          transition: 'background-color 0.2s ease'\n        }\n      }, 'Teacher Login'),\n      \n      React.createElement('a', {\n        href: '/admin-login',\n        style: {\n          display: 'inline-block',\n          padding: '15px 30px',\n          background: '#f59e0b',\n          color: 'white',\n          textDecoration: 'none',\n          borderRadius: '8px',\n          fontSize: '16px',\n          fontWeight: '600',\n          transition: 'background-color 0.2s ease'\n        }\n      }, 'Admin Login')\n    )\n  );\n};\n\nexport default HomePage;","size_bytes":2143},"frontend/src/components/Layout/Layout.css":{"content":".layout {\n  min-height: 100vh;\n  background: #f9fafb;\n}\n\n.layout-header {\n  background: white;\n  border-bottom: 1px solid #e5e7eb;\n  padding: 0 20px;\n}\n\n.header-content {\n  max-width: 1200px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 60px;\n}\n\n.header-title {\n  color: #111827;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n}\n\n.header-user {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n\n.user-name {\n  color: #374151;\n  font-weight: 500;\n}\n\n.logout-button {\n  background: #ef4444;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n\n.logout-button:hover {\n  background: #dc2626;\n}\n\n.layout-main {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}","size_bytes":856},"frontend/src/components/Layout/Layout.tsx":{"content":"import React from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport './Layout.css';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  title?: string;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children, title }) => {\n  const { user, logout } = useAuth();\n\n  const handleLogout = () => {\n    logout();\n    window.location.href = '/';\n  };\n\n  return React.createElement('div', { className: 'layout' },\n    React.createElement('header', { className: 'layout-header' },\n      React.createElement('div', { className: 'header-content' },\n        React.createElement('h1', { className: 'header-title' },\n          title || 'Student Portal'\n        ),\n        React.createElement('div', { className: 'header-user' },\n          React.createElement('span', { className: 'user-name' },\n            `Welcome, ${user?.firstName} ${user?.lastName || ''}`\n          ),\n          React.createElement('button', {\n            onClick: handleLogout,\n            className: 'logout-button'\n          }, 'Logout')\n        )\n      )\n    ),\n    React.createElement('main', { className: 'layout-main' }, children)\n  );\n};\n\nexport default Layout;","size_bytes":1147},"frontend/src/components/Login/Login.css":{"content":".login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n  padding: 20px;\n}\n\n.login-card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 40px;\n  width: 100%;\n  max-width: 400px;\n}\n\n.login-title {\n  text-align: center;\n  margin-bottom: 30px;\n  color: #333;\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.error-message {\n  background: #fee2e2;\n  color: #dc2626;\n  padding: 12px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n  text-align: center;\n  font-size: 14px;\n}\n\n.login-form {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n}\n\n.form-label {\n  margin-bottom: 8px;\n  color: #374151;\n  font-weight: 500;\n}\n\n.form-input {\n  padding: 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 4px;\n  font-size: 16px;\n  transition: border-color 0.2s ease;\n}\n\n.form-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.login-button {\n  background: #3b82f6;\n  color: white;\n  padding: 12px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  margin-top: 10px;\n}\n\n.login-button:hover {\n  background: #2563eb;\n}\n\n.login-button:disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n\n.login-links {\n  text-align: center;\n  margin-top: 20px;\n}\n\n.login-links p {\n  color: #6b7280;\n  margin-bottom: 10px;\n}\n\n.link {\n  color: #3b82f6;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.link:hover {\n  text-decoration: underline;\n}","size_bytes":1690},"frontend/src/components/Login/Login.tsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { authAPI } from '../../services/api';\nimport { LoginCredentials } from '../../types';\nimport './Login.css';\n\ninterface LoginProps {\n  userType: 'student' | 'teacher' | 'admin';\n}\n\nconst Login: React.FC<LoginProps> = ({ userType }) => {\n  const [credentials, setCredentials] = useState<LoginCredentials>({ id: '', password: '' });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      let response;\n      switch (userType) {\n        case 'student':\n          response = await authAPI.studentLogin(credentials);\n          break;\n        case 'teacher':\n          response = await authAPI.teacherLogin(credentials);\n          break;\n        case 'admin':\n          response = await authAPI.adminLogin(credentials);\n          break;\n      }\n\n      login(response.user, response.token);\n      window.location.href = `/${userType}-dashboard`;\n    } catch (error: any) {\n      setError(error.response?.data?.message || 'Login failed. Please check your credentials.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCredentials({\n      ...credentials,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const getIdLabel = () => {\n    switch (userType) {\n      case 'student':\n        return 'Student ID';\n      case 'teacher':\n        return 'Teacher ID';\n      case 'admin':\n        return 'Admin ID';\n    }\n  };\n\n  return React.createElement('div', { className: 'login-container' },\n    React.createElement('div', { className: 'login-card' },\n      React.createElement('h2', { className: 'login-title' }, \n        userType.charAt(0).toUpperCase() + userType.slice(1) + ' Login'\n      ),\n      \n      error && React.createElement('div', { className: 'error-message' }, error),\n      \n      React.createElement('form', { onSubmit: handleSubmit, className: 'login-form' },\n        React.createElement('div', { className: 'form-group' },\n          React.createElement('label', { htmlFor: 'id', className: 'form-label' }, getIdLabel()),\n          React.createElement('input', {\n            type: 'text',\n            id: 'id',\n            name: 'id',\n            value: credentials.id,\n            onChange: handleInputChange,\n            className: 'form-input',\n            placeholder: `Enter your ${getIdLabel().toLowerCase()}`,\n            required: true\n          })\n        ),\n\n        React.createElement('div', { className: 'form-group' },\n          React.createElement('label', { htmlFor: 'password', className: 'form-label' }, 'Password'),\n          React.createElement('input', {\n            type: 'password',\n            id: 'password',\n            name: 'password',\n            value: credentials.password,\n            onChange: handleInputChange,\n            className: 'form-input',\n            placeholder: 'Enter your password',\n            required: true\n          })\n        ),\n\n        React.createElement('button', {\n          type: 'submit',\n          disabled: loading,\n          className: 'login-button'\n        }, loading ? 'Logging in...' : 'Login')\n      ),\n\n      React.createElement('div', { className: 'login-links' },\n        React.createElement('p', null, 'Don\\'t have an account?'),\n        userType === 'student' && React.createElement('a', {\n          href: '/register',\n          className: 'link'\n        }, 'Register as Student')\n      )\n    )\n  );\n};\n\nexport default Login;","size_bytes":3700},"frontend/src/context/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const savedToken = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n\n    if (savedToken && savedUser) {\n      try {\n        setToken(savedToken);\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user data:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n  }, []);\n\n  const login = (userData: User, userToken: string) => {\n    setUser(userData);\n    setToken(userToken);\n    localStorage.setItem('token', userToken);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  };\n\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    isAuthenticated: !!user && !!token,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":1857},"frontend/src/index.css":{"content":"body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","size_bytes":366},"frontend/src/index.tsx":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","size_bytes":554},"frontend/src/react-app-env.d.ts":{"content":"/// <reference types=\"react-scripts\" />\n","size_bytes":40},"frontend/src/reportWebVitals.ts":{"content":"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","size_bytes":425},"frontend/src/services/api.ts":{"content":"import axios, { AxiosResponse } from 'axios';\nimport { LoginCredentials, User, Student, Teacher, Admin } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor for handling errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication APIs\nexport const authAPI = {\n  // Student login\n  studentLogin: async (credentials: LoginCredentials): Promise<{ token: string; user: Student }> => {\n    const response: AxiosResponse<{ token: string; user: Student }> = await api.post('/students/login', {\n      studentID: credentials.id,\n      password: credentials.password,\n    });\n    return response.data;\n  },\n\n  // Teacher login\n  teacherLogin: async (credentials: LoginCredentials): Promise<{ token: string; user: Teacher }> => {\n    const response: AxiosResponse<{ token: string; user: Teacher }> = await api.post('/teachers/login', {\n      teacherID: credentials.id,\n      password: credentials.password,\n    });\n    return response.data;\n  },\n\n  // Admin login\n  adminLogin: async (credentials: LoginCredentials): Promise<{ token: string; user: Admin }> => {\n    const response: AxiosResponse<{ token: string; user: Admin }> = await api.post('/admin/login', {\n      adminID: credentials.id,\n      password: credentials.password,\n    });\n    return response.data;\n  },\n\n  // Student registration\n  studentRegister: async (userData: Partial<Student>): Promise<{ token: string; user: Student }> => {\n    const response: AxiosResponse<{ token: string; user: Student }> = await api.post('/students/register', userData);\n    return response.data;\n  },\n};\n\n// Student APIs\nexport const studentAPI = {\n  // Get attendance\n  getAttendance: async (studentID: string) => {\n    const response = await api.get(`/students/Attendance/${studentID}`);\n    return response.data;\n  },\n\n  // Get homework\n  getHomework: async (studentID: string) => {\n    const response = await api.get(`/students/Homework/${studentID}`);\n    return response.data;\n  },\n\n  // Get marks\n  getMarks: async (studentID: string) => {\n    const response = await api.get(`/students/Marks/${studentID}`);\n    return response.data;\n  },\n\n  // Get notices\n  getNotices: async (studentID: string) => {\n    const response = await api.get(`/students/Notice/${studentID}`);\n    return response.data;\n  },\n\n  // Get calendar events\n  getCalendar: async (studentID: string) => {\n    const response = await api.get(`/students/Calendar/${studentID}`);\n    return response.data;\n  },\n\n  // Get timetable\n  getTimetable: async (studentID: string) => {\n    const response = await api.get(`/students/Timetable/${studentID}`);\n    return response.data;\n  },\n};\n\n// Teacher APIs (simplified for now)\nexport const teacherAPI = {\n  // Get students for attendance\n  getStudents: async () => {\n    const response = await api.get('/teachers/students');\n    return response.data;\n  },\n\n  // Mark attendance\n  markAttendance: async (attendanceData: any) => {\n    const response = await api.post('/teachers/Attendance', attendanceData);\n    return response.data;\n  },\n\n  // Manage homework\n  createHomework: async (homeworkData: any) => {\n    const response = await api.post('/teachers/Homework', homeworkData);\n    return response.data;\n  },\n\n  // Manage marks\n  addMarks: async (marksData: any) => {\n    const response = await api.post('/teachers/Marks', marksData);\n    return response.data;\n  },\n\n  // Create notice\n  createNotice: async (noticeData: any) => {\n    const response = await api.post('/teachers/Notice', noticeData);\n    return response.data;\n  },\n};\n\n// Admin APIs (simplified for now)\nexport const adminAPI = {\n  // Get all students\n  getStudents: async () => {\n    const response = await api.get('/admin/students');\n    return response.data;\n  },\n\n  // Get all teachers\n  getTeachers: async () => {\n    const response = await api.get('/admin/teachers');\n    return response.data;\n  },\n\n  // Manage calendar events\n  createCalendarEvent: async (eventData: any) => {\n    const response = await api.post('/admin/calendar', eventData);\n    return response.data;\n  },\n};\n\nexport default api;","size_bytes":4718},"frontend/src/setupTests.ts":{"content":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n","size_bytes":241},"frontend/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  firstName: string;\n  lastName?: string;\n  email: string;\n  role: 'student' | 'teacher' | 'admin';\n}\n\nexport interface LoginCredentials {\n  id: string;\n  password: string;\n}\n\nexport interface Student extends User {\n  studentID: string;\n  grade: number;\n  fathersName: string;\n  mothersName: string;\n  address: string;\n}\n\nexport interface Teacher extends User {\n  teacherID: string;\n  address: string;\n}\n\nexport interface Admin extends User {\n  adminID: string;\n}\n\nexport interface Attendance {\n  id: string;\n  date: Date;\n  studentID: string;\n  status: 'Present' | 'Absent';\n}\n\nexport interface Homework {\n  id: string;\n  studentID: string;\n  title: string;\n  description: string;\n  assignDate: Date;\n  dueDate: Date;\n}\n\nexport interface Marks {\n  id: string;\n  studentID: string;\n  subject: string;\n  marksObtained: number;\n  totalMarks: number;\n  examType: 'Midterm' | 'Final' | 'Class Test';\n  semester: string;\n  date: Date;\n}\n\nexport interface Notice {\n  id: string;\n  studentID: string;\n  title: string;\n  description: string;\n  date: Date;\n}\n\nexport interface CalendarEvent {\n  id: string;\n  studentID: string;\n  title: string;\n  description: string;\n  date: Date;\n  category: 'Holiday' | 'Exam' | 'Event' | 'Reminder' | 'Other';\n}\n\nexport interface Timetable {\n  id: string;\n  classId: string;\n  timetable: DaySchedule[];\n}\n\nexport interface DaySchedule {\n  day: 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';\n  periods: Period[];\n}\n\nexport interface Period {\n  subject: string;\n  startTime: string;\n  endTime: string;\n}","size_bytes":1593}},"version":1}